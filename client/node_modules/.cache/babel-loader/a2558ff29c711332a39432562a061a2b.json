{"ast":null,"code":"/**\n * @remix-run/router v1.0.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    encodeLocation(location) {\n      return location;\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction createURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createPath(location);\n  return new URL(href, base);\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    encodeLocation(location) {\n      // Encode a Location the same way window.location would\n      let url = createURL(createPath(location));\n      return _extends({}, location, {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      });\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    location = init.history.encodeLocation(location);\n    let historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation;\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission);\n\n      await startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let {\n        error\n      } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(redirect, navigation, replace) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match, fetchMatches] = _ref8;\n      return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match, fetchMatches, router.basename);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst validActionMethods = new Set([\"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\nconst validRequestMethods = new Set([\"GET\", \"HEAD\", ...validActionMethods]);\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request) {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      let {\n        matches: methodNotAllowedMatches,\n        route,\n        error\n      } = getMethodNotAllowedMatches(dataRoutes);\n      return {\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    } else if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    let result = await queryImpl(request, location, matches);\n\n    if (result instanceof Response) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated thrown Response (such as a\n   * 404 or 405) will have a custom X-Remix-Router-Error: \"yes\" header on it\n   * in order to differentiate from responses thrown from user actions/loaders.\n   */\n\n\n  async function queryRoute(request, routeId) {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      throw createRouterErrorResponse(null, {\n        status: 405,\n        statusText: \"Method Not Allowed\"\n      });\n    } else if (!matches) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\"\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (!match) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\"\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, match);\n\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(request, location, matches, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (validActionMethods.has(request.method)) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, routeMatch);\n      return result instanceof Response ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      if (isRouteRequest) {\n        throw createRouterErrorResponse(null, {\n          status: 405,\n          statusText: \"Method Not Allowed\"\n        });\n      }\n\n      result = getMethodNotAllowedResult(request.url);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, undefined, // Basename not currently supported in static handlers\n      true, isRouteRequest);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {}\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n\n    let context = await loadRouteData(request, matches);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, undefined, // Basename not currently supported in static handlers\n    true, isRouteRequest))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  function createRouterErrorResponse(body, init) {\n    return new Response(body, _extends({}, init, {\n      headers: _extends({}, init.headers, {\n        \"X-Remix-Router-Error\": \"yes\"\n      })\n    }));\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match, fetchMatches] = _ref10; // This fetcher was cancelled from a prior action submission - force reload\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest) {\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params\n    }), abortPromise]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    let status = result.status; // Process redirects\n\n    if (status >= 300 && status <= 399) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in redirects\n\n      let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n      let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n      let requestPath = createURL(request.url).pathname;\n      let resolvedLocation = resolveTo(location, routePathnames, requestPath);\n      invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + result.headers.get(\"Location\")); // Prepend the basename to the redirect location if we have one\n\n      if (basename) {\n        let path = resolvedLocation.pathname;\n        resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n      }\n\n      location = createPath(resolvedLocation); // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n\nfunction createRequest(location, signal, submission) {\n  let url = createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes, status, statusText) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-\" + status + \"-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(status, statusText, null)\n  };\n}\n\nfunction getNotFoundMatches(routes) {\n  return getShortCircuitMatches(routes, 404, \"Not Found\");\n}\n\nfunction getMethodNotAllowedMatches(routes) {\n  return getShortCircuitMatches(routes, 405, \"Method Not Allowed\");\n}\n\nfunction getMethodNotAllowedResult(path) {\n  let href = typeof path === \"string\" ? path : createPath(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result) {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && obj.response instanceof Response && (obj.type === ResultType.data || ResultType.error);\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"sources":["../history.ts","../utils.ts","../router.ts"],"names":["Action","PopStateEventType","options","initialEntries","v5Compat","entries","createMemoryLocation","entry","index","clampIndex","initialIndex","action","listener","Math","state","location","createLocation","getCurrentLocation","warning","JSON","history","createHref","createPath","encodeLocation","push","nextLocation","replace","go","listen","hash","window","globalHistory","getUrlBasedHistory","pathname","search","parsePath","base","href","url","hashIndex","console","usr","key","current","to","createKey","parsedPath","path","searchIndex","document","validateLocation","historyState","getHistoryState","getLocation","createURL","ResultType","route","parentPath","allIds","treePath","id","invariant","isIndexRoute","indexRoute","pathOrLayoutRoute","children","convertRoutesToDataRoutes","undefined","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","routes","meta","relativePath","caseSensitive","childrenIndex","joinPaths","routesMeta","score","computeScore","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","initialScore","segment","siblings","n","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","star","str","pattern","compilePath","captureGroups","paramName","splatValue","memo","safelyDecodeURIComponent","paramNames","regexpSource","matcher","decodeURI","error","decodeURIComponent","startIndex","nextChar","value","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","field","isPathRelative","getInvalidPathError","isEmptyPath","toArg","from","routePathnameIndex","routePathnames","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","locationPathname","paths","json","init","responseInit","status","headers","DeferredData","constructor","data","Array","reject","onAbort","trackPromise","promise","Promise","get","onSettle","subscriber","subscribe","cancel","resolveData","aborted","signal","resolve","done","unwrappedData","unwrapTrackedPromise","isTrackedPromise","redirect","ErrorResponse","statusText","e","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","isServer","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","matchRoutes","initialErrors","getNotFoundMatches","initialized","m","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","pendingAction","HistoryAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","startNavigation","pendingNavigationController","deleteFetcher","isActionReload","newLoaderData","mergeLoaderData","newState","updateState","getSavedScrollPosition","normalizeNavigateOptions","opts","submission","pendingError","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","cancelActiveDeferreds","completeNavigation","isHashChangeOnly","request","createRequest","findNearestBoundary","actionOutput","handleAction","pendingActionData","handleLoaders","actionMatch","getTargetMatch","result","getMethodNotAllowedResult","callLoaderOrAction","router","shortCircuited","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","getMatchesToLoad","routeId","matchesToLoad","revalidatingFetchers","fetcher","revalidatingFetcher","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectHistoryAction","results","loaderResults","resolveDeferredResults","controller","getFetcher","doneKeys","markFetchersDone","yeetedKeys","cancelledRouteIds","predicate","dfd","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","validActionMethods","validRequestMethods","getMethodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","createRouterErrorResponse","routeData","v","submit","routeMatch","loadRouteData","isQueryRouteResponse","isRedirectResponse","method","isRouteRequest","Location","context","isRouteErrorResponse","requestMatches","getLoaderMatchesUntilBoundary","processRouteLoaderData","queryRoute","getStaticContextFromError","newContext","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","boundaryMatches","boundaryId","navigationMatches","shouldRevalidateLoader","shouldRevalidate","isNew","currentMatch","isMissingData","currentLoaderData","currentPath","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","isNewRouteInstance","routeChoice","isStaticRequest","abortPromise","onReject","handler","resultType","activeMatches","getPathContributingMatches","requestPath","resolvedLocation","resolveTo","type","revalidate","response","contentType","foundError","mergedLoaderData","eligibleMatches","r","getShortCircuitMatches","obj","currentMatches","isRevalidatingLoader","unwrap","handle","pathMatches"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;EAAA;AACA;AACA;;AAEA;;AAEG;;;IACH,M;;AAAA,CAAA,UAAA,MAAA,EAAkB;AAChB;;;;;;AAMG;AACHA,EAAAA,MAAAA,CAAAA,KAAAA,CAAAA,GAAAA,KAAAA;AAEA;;;;AAIG;;AACHA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA,GAAAA,MAAAA;AAEA;;;AAGG;;AACHA,EAAAA,MAAAA,CAAAA,SAAAA,CAAAA,GAAAA,SAAAA;AArBF,CAAA,EAAYA,MAAM,KAANA,MAAM,GAAlB,EAAkB,CAAlB;;AA2KA,MAAMC,iBAAiB,GAAvB,UAAA;AA+BA;;;AAGG;;AACa,SAAA,mBAAA,CAAA,OAAA,EACoB;AAAA,MAAlCC,OAAkC,KAAA,KAAA,CAAA,EAAA;AAAlCA,IAAAA,OAAkC,GAAF,EAAhCA;AAAkC;;AAElC,MAAI;AAAEC,IAAAA,cAAc,GAAG,CAAnB,GAAmB,CAAnB;AAAA,IAAA,YAAA;AAAwCC,IAAAA,QAAQ,GAAG;AAAnD,MAAJ,OAAA;AACA,MAHkC,OAGlC,CAHkC,CAAA;;AAIlCC,EAAAA,OAAO,GAAGF,cAAc,CAAdA,GAAAA,CAAmB,CAAA,KAAA,EAAA,KAAA,KAC3BG,oBAAoB,CAAA,KAAA,EAElB,OAAA,KAAA,KAAA,QAAA,GAAA,IAAA,GAAmCC,KAAK,CAFtB,KAAA,EAGlBC,KAAK,KAALA,CAAAA,GAAAA,SAAAA,GAJJH,SACsB,CADZF,CAAVE;AAOA,MAAIG,KAAK,GAAGC,UAAU,CACpBC,YAAY,IAAZA,IAAAA,GAAuBL,OAAO,CAAPA,MAAAA,GAAvBK,CAAAA,GADF,YAAsB,CAAtB;AAGA,MAAIC,MAAM,GAAGX,MAAM,CAAnB,GAAA;AACA,MAAIY,QAAQ,GAAZ,IAAA;;AAEA,WAAA,UAAA,CAAA,CAAA,EAA6B;AAC3B,WAAOC,IAAI,CAAJA,GAAAA,CAASA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAATA,CAASA,CAATA,EAAyBR,OAAO,CAAPA,MAAAA,GAAhC,CAAOQ,CAAP;AACD;;AACD,WAAA,kBAAA,GAA2B;AACzB,WAAOR,OAAO,CAAd,KAAc,CAAd;AACD;;AACD,WAAA,oBAAA,CAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAGc;AAAA,QADZS,KACY,KAAA,KAAA,CAAA,EAAA;AADZA,MAAAA,KACY,GADC,IAAbA;AACY;;AAEZ,QAAIC,QAAQ,GAAGC,cAAc,CAC3BX,OAAO,GAAGY,kBAAkB,GAArB,QAAA,GADoB,GAAA,EAAA,EAAA,EAAA,KAAA,EAA7B,GAA6B,CAA7B;AAMAC,IAAAA,SAAO,CACLH,QAAQ,CAARA,QAAAA,CAAAA,MAAAA,CAAAA,CAAAA,MADK,GAAA,EAAA,6DAEsDI,IAAI,CAAJA,SAAAA,CAF7DD,EAE6DC,CAFtD,CAAPD;AAMA,WAAA,QAAA;AACD;;AAED,MAAIE,OAAO,GAAkB;AAC3B,QAAA,KAAA,GAAS;AACP,aAAA,KAAA;AAFyB,KAAA;;AAI3B,QAAA,MAAA,GAAU;AACR,aAAA,MAAA;AALyB,KAAA;;AAO3B,QAAA,QAAA,GAAY;AACV,aAAOH,kBAAP,EAAA;AARyB,KAAA;;AAU3BI,IAAAA,UAAU,CAAA,EAAA,EAAG;AACX,aAAO,OAAA,EAAA,KAAA,QAAA,GAAA,EAAA,GAA8BC,UAAU,CAA/C,EAA+C,CAA/C;AAXyB,KAAA;;AAa3BC,IAAAA,cAAc,CAAA,QAAA,EAAS;AACrB,aAAA,QAAA;AAdyB,KAAA;;AAgB3BC,IAAAA,IAAI,CAAA,EAAA,EAAA,KAAA,EAAU;AACZb,MAAAA,MAAM,GAAGX,MAAM,CAAfW,IAAAA;AACA,UAAIc,YAAY,GAAGnB,oBAAoB,CAAA,EAAA,EAAvC,KAAuC,CAAvC;AACAE,MAAAA,KAAK,IAALA,CAAAA;AACAH,MAAAA,OAAO,CAAPA,MAAAA,CAAAA,KAAAA,EAAsBA,OAAO,CAA7BA,MAAAA,EAAAA,YAAAA;;AACA,UAAID,QAAQ,IAAZ,QAAA,EAA0B;AACxBQ,QAAAA,QAAQ,CAAC;AAAA,UAAA,MAAA;AAAUG,UAAAA,QAAQ,EAAEU;AAApB,SAAD,CAARb;AACD;AAvBwB,KAAA;;AAyB3Bc,IAAAA,OAAO,CAAA,EAAA,EAAA,KAAA,EAAU;AACff,MAAAA,MAAM,GAAGX,MAAM,CAAfW,OAAAA;AACA,UAAIc,YAAY,GAAGnB,oBAAoB,CAAA,EAAA,EAAvC,KAAuC,CAAvC;AACAD,MAAAA,OAAO,CAAPA,KAAO,CAAPA,GAAAA,YAAAA;;AACA,UAAID,QAAQ,IAAZ,QAAA,EAA0B;AACxBQ,QAAAA,QAAQ,CAAC;AAAA,UAAA,MAAA;AAAUG,UAAAA,QAAQ,EAAEU;AAApB,SAAD,CAARb;AACD;AA/BwB,KAAA;;AAiC3Be,IAAAA,EAAE,CAAA,KAAA,EAAM;AACNhB,MAAAA,MAAM,GAAGX,MAAM,CAAfW,GAAAA;AACAH,MAAAA,KAAK,GAAGC,UAAU,CAACD,KAAK,GAAxBA,KAAkB,CAAlBA;;AACA,UAAA,QAAA,EAAc;AACZI,QAAAA,QAAQ,CAAC;AAAA,UAAA,MAAA;AAAUG,UAAAA,QAAQ,EAAEE,kBAAkB;AAAtC,SAAD,CAARL;AACD;AAtCwB,KAAA;;AAwC3BgB,IAAAA,MAAM,CAAA,EAAA,EAAa;AACjBhB,MAAAA,QAAQ,GAARA,EAAAA;AACA,aAAO,MAAK;AACVA,QAAAA,QAAQ,GAARA,IAAAA;AADF,OAAA;AAGD;;AA7C0B,GAA7B;AAgDA,SAAA,OAAA;AACD;AAkBD;;;;;;AAMG;;;AACa,SAAA,oBAAA,CAAA,OAAA,EACqB;AAAA,MAAnCV,OAAmC,KAAA,KAAA,CAAA,EAAA;AAAnCA,IAAAA,OAAmC,GAAF,EAAjCA;AAAmC;;AAEnC,WAAA,qBAAA,CAAA,MAAA,EAAA,aAAA,EAEkC;AAEhC,QAAI;AAAA,MAAA,QAAA;AAAA,MAAA,MAAA;AAAoB2B,MAAAA;AAApB,QAA6BC,MAAM,CAAvC,QAAA;AACA,WAAOd,cAAc,CAAA,EAAA,EAEnB;AAAA,MAAA,QAAA;AAAA,MAAA,MAAA;AAAoBa,MAAAA;AAApB,KAFmB,EAAA;AAIlBE,IAAAA,aAAa,CAAbA,KAAAA,IAAuBA,aAAa,CAAbA,KAAAA,CAAxB,GAACA,IAJkB,IAAA,EAKlBA,aAAa,CAAbA,KAAAA,IAAuBA,aAAa,CAAbA,KAAAA,CAAxB,GAACA,IALH,SAAqB,CAArB;AAOD;;AAED,WAAA,iBAAA,CAAA,MAAA,EAAA,EAAA,EAAiD;AAC/C,WAAO,OAAA,EAAA,KAAA,QAAA,GAAA,EAAA,GAA8BT,UAAU,CAA/C,EAA+C,CAA/C;AACD;;AAED,SAAOU,kBAAkB,CAAA,qBAAA,EAAA,iBAAA,EAAA,IAAA,EAAzB,OAAyB,CAAzB;AAMD;AAsBD;;;;;;;AAOG;;;AACa,SAAA,iBAAA,CAAA,OAAA,EACkB;AAAA,MAAhC9B,OAAgC,KAAA,KAAA,CAAA,EAAA;AAAhCA,IAAAA,OAAgC,GAAF,EAA9BA;AAAgC;;AAEhC,WAAA,kBAAA,CAAA,MAAA,EAAA,aAAA,EAEkC;AAEhC,QAAI;AACF+B,MAAAA,QAAQ,GADN,GAAA;AAEFC,MAAAA,MAAM,GAFJ,EAAA;AAGFL,MAAAA,IAAI,GAAG;AAHL,QAIAM,SAAS,CAACL,MAAM,CAANA,QAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAJd,CAIcA,CAAD,CAJb;AAKA,WAAOd,cAAc,CAAA,EAAA,EAEnB;AAAA,MAAA,QAAA;AAAA,MAAA,MAAA;AAAoBa,MAAAA;AAApB,KAFmB,EAAA;AAIlBE,IAAAA,aAAa,CAAbA,KAAAA,IAAuBA,aAAa,CAAbA,KAAAA,CAAxB,GAACA,IAJkB,IAAA,EAKlBA,aAAa,CAAbA,KAAAA,IAAuBA,aAAa,CAAbA,KAAAA,CAAxB,GAACA,IALH,SAAqB,CAArB;AAOD;;AAED,WAAA,cAAA,CAAA,MAAA,EAAA,EAAA,EAA8C;AAC5C,QAAIK,IAAI,GAAGN,MAAM,CAANA,QAAAA,CAAAA,aAAAA,CAAX,MAAWA,CAAX;AACA,QAAIO,IAAI,GAAR,EAAA;;AAEA,QAAID,IAAI,IAAIA,IAAI,CAAJA,YAAAA,CAAZ,MAAYA,CAAZ,EAAuC;AACrC,UAAIE,GAAG,GAAGR,MAAM,CAANA,QAAAA,CAAV,IAAA;AACA,UAAIS,SAAS,GAAGD,GAAG,CAAHA,OAAAA,CAAhB,GAAgBA,CAAhB;AACAD,MAAAA,IAAI,GAAGE,SAAS,KAAK,CAAdA,CAAAA,GAAAA,GAAAA,GAAyBD,GAAG,CAAHA,KAAAA,CAAAA,CAAAA,EAAhCD,SAAgCC,CAAhCD;AACD;;AAED,WAAOA,IAAI,GAAJA,GAAAA,IAAc,OAAA,EAAA,KAAA,QAAA,GAAA,EAAA,GAA8Bf,UAAU,CAA7D,EAA6D,CAAtDe,CAAP;AACD;;AAED,WAAA,oBAAA,CAAA,QAAA,EAAA,EAAA,EAAwD;AACtDnB,IAAAA,SAAO,CACLH,QAAQ,CAARA,QAAAA,CAAAA,MAAAA,CAAAA,CAAAA,MADK,GAAA,EAAA,+DAEwDI,IAAI,CAAJA,SAAAA,CAFxD,EAEwDA,CAFxD,GAAPD,GAAO,CAAPA;AAMD;;AAED,SAAOc,kBAAkB,CAAA,kBAAA,EAAA,cAAA,EAAA,oBAAA,EAAzB,OAAyB,CAAzB;AAMD,C,CAAA;AAGD;AACA;AACA;;;AAEA,SAAA,SAAA,CAAA,IAAA,EAAA,OAAA,EAA2C;AACzC,MAAI,CAAJ,IAAA,EAAW;AACT;AACA,QAAI,OAAA,OAAA,KAAJ,WAAA,EAAoCQ,OAAO,CAAPA,IAAAA,CAAAA,OAAAA;;AAEpC,QAAI;AACF;AACA;AACA;AACA;AACA;AACA,YAAM,IAAA,KAAA,CANJ,OAMI,CAAN,CANE,CAAA;AAAJ,KAAA,CAQE,OAAA,CAAA,EAAU,CAAE;AACf;AACF;;AAED,SAAA,SAAA,GAAkB;AAChB,SAAO3B,IAAI,CAAJA,MAAAA,GAAAA,QAAAA,CAAAA,EAAAA,EAAAA,MAAAA,CAAAA,CAAAA,EAAP,CAAOA,CAAP;AACD;AAED;;AAEG;;;AACH,SAAA,eAAA,CAAA,QAAA,EAA2C;AACzC,SAAO;AACL4B,IAAAA,GAAG,EAAE1B,QAAQ,CADR,KAAA;AAEL2B,IAAAA,GAAG,EAAE3B,QAAQ,CAAC2B;AAFT,GAAP;AAID;AAED;;AAEG;;;AACG,SAAA,cAAA,CAAA,OAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAIQ;AAAA,MADZ5B,KACY,KAAA,KAAA,CAAA,EAAA;AADZA,IAAAA,KACY,GADC,IAAbA;AACY;;AAEZ,MAAIC,QAAQ,GAAA,QAAA,CAAA;AACVkB,IAAAA,QAAQ,EAAE,OAAA,OAAA,KAAA,QAAA,GAAA,OAAA,GAAwCU,OAAO,CAD/C,QAAA;AAEVT,IAAAA,MAAM,EAFI,EAAA;AAGVL,IAAAA,IAAI,EAAE;AAHI,GAAA,EAIN,OAAA,EAAA,KAAA,QAAA,GAAyBM,SAAS,CAAlC,EAAkC,CAAlC,GAJM,EAAA,EAAA;AAAA,IAAA,KAAA;AAMV;AACA;AACA;AACA;AACAO,IAAAA,GAAG,EAAGE,EAAE,IAAKA,EAAe,CAAvB,GAACA,IAAD,GAACA,IAAsCC,SAAS;AAV3C,GAAA,CAAZ;;AAYA,SAAA,QAAA;AACD;AAED;;AAEG;;;AACa,SAAA,UAAA,CAIA,IAJA,EAIA;AAAA,MAJW;AACzBZ,IAAAA,QAAQ,GADiB,GAAA;AAEzBC,IAAAA,MAAM,GAFmB,EAAA;AAGzBL,IAAAA,IAAI,GAAG;AAHkB,MAIX,IAAA;AACd,MAAIK,MAAM,IAAIA,MAAM,KAApB,GAAA,EACED,QAAQ,IAAIC,MAAM,CAANA,MAAAA,CAAAA,CAAAA,MAAAA,GAAAA,GAAAA,MAAAA,GAAoC,MAAhDD,MAAAA;AACF,MAAIJ,IAAI,IAAIA,IAAI,KAAhB,GAAA,EACEI,QAAQ,IAAIJ,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,MAAAA,GAAAA,GAAAA,IAAAA,GAAgC,MAA5CI,IAAAA;AACF,SAAA,QAAA;AACD;AAED;;AAEG;;;AACG,SAAA,SAAA,CAAA,IAAA,EAAgC;AACpC,MAAIa,UAAU,GAAd,EAAA;;AAEA,MAAA,IAAA,EAAU;AACR,QAAIP,SAAS,GAAGQ,IAAI,CAAJA,OAAAA,CAAhB,GAAgBA,CAAhB;;AACA,QAAIR,SAAS,IAAb,CAAA,EAAoB;AAClBO,MAAAA,UAAU,CAAVA,IAAAA,GAAkBC,IAAI,CAAJA,MAAAA,CAAlBD,SAAkBC,CAAlBD;AACAC,MAAAA,IAAI,GAAGA,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,EAAPA,SAAOA,CAAPA;AACD;;AAED,QAAIC,WAAW,GAAGD,IAAI,CAAJA,OAAAA,CAAlB,GAAkBA,CAAlB;;AACA,QAAIC,WAAW,IAAf,CAAA,EAAsB;AACpBF,MAAAA,UAAU,CAAVA,MAAAA,GAAoBC,IAAI,CAAJA,MAAAA,CAApBD,WAAoBC,CAApBD;AACAC,MAAAA,IAAI,GAAGA,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,EAAPA,WAAOA,CAAPA;AACD;;AAED,QAAA,IAAA,EAAU;AACRD,MAAAA,UAAU,CAAVA,QAAAA,GAAAA,IAAAA;AACD;AACF;;AAED,SAAA,UAAA;AACD;;AAEK,SAAA,SAAA,CAAA,QAAA,EAA+C;AACnD;AACA;AACA;AACA,MAAIV,IAAI,GACN,OAAA,MAAA,KAAA,WAAA,IACA,OAAON,MAAM,CAAb,QAAA,KADA,WAAA,IAEAA,MAAM,CAANA,QAAAA,CAAAA,MAAAA,KAFA,MAAA,GAGIA,MAAM,CAANA,QAAAA,CAHJ,MAAA,GADF,mBAAA;AAMA,MAAIO,IAAI,GAAG,OAAA,QAAA,KAAA,QAAA,GAAA,QAAA,GAA0Cf,UAAU,CAA/D,QAA+D,CAA/D;AACA,SAAO,IAAA,GAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AACD;;AASD,SAAA,kBAAA,CAAA,WAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,OAAA,EAIiC;AAAA,MAA/BpB,OAA+B,KAAA,KAAA,CAAA,EAAA;AAA/BA,IAAAA,OAA+B,GAAF,EAA7BA;AAA+B;;AAE/B,MAAI;AAAE4B,IAAAA,MAAM,GAAGmB,QAAQ,CAAnB,WAAA;AAAkC7C,IAAAA,QAAQ,GAAG;AAA7C,MAAJ,OAAA;AACA,MAAI2B,aAAa,GAAGD,MAAM,CAA1B,OAAA;AACA,MAAInB,MAAM,GAAGX,MAAM,CAAnB,GAAA;AACA,MAAIY,QAAQ,GAAZ,IAAA;;AAEA,WAAA,SAAA,GAAkB;AAChBD,IAAAA,MAAM,GAAGX,MAAM,CAAfW,GAAAA;;AACA,QAAA,QAAA,EAAc;AACZC,MAAAA,QAAQ,CAAC;AAAA,QAAA,MAAA;AAAUG,QAAAA,QAAQ,EAAEK,OAAO,CAACL;AAA5B,OAAD,CAARH;AACD;AACF;;AAED,WAAA,IAAA,CAAA,EAAA,EAAA,KAAA,EAAiC;AAC/BD,IAAAA,MAAM,GAAGX,MAAM,CAAfW,IAAAA;AACA,QAAII,QAAQ,GAAGC,cAAc,CAACI,OAAO,CAAR,QAAA,EAAA,EAAA,EAA7B,KAA6B,CAA7B;AACA,QAAA,gBAAA,EAAsB8B,gBAAgB,CAAA,QAAA,EAAhBA,EAAgB,CAAhBA;AAEtB,QAAIC,YAAY,GAAGC,eAAe,CAAlC,QAAkC,CAAlC;AACA,QAAId,GAAG,GAAGlB,OAAO,CAAPA,UAAAA,CANqB,QAMrBA,CAAV,CAN+B,CAAA;;AAS/B,QAAI;AACFW,MAAAA,aAAa,CAAbA,SAAAA,CAAAA,YAAAA,EAAAA,EAAAA,EAAAA,GAAAA;AADF,KAAA,CAEE,OAAA,KAAA,EAAc;AACd;AACA;AACAD,MAAAA,MAAM,CAANA,QAAAA,CAAAA,MAAAA,CAAAA,GAAAA;AACD;;AAED,QAAI1B,QAAQ,IAAZ,QAAA,EAA0B;AACxBQ,MAAAA,QAAQ,CAAC;AAAA,QAAA,MAAA;AAAUG,QAAAA,QAAQ,EAAEK,OAAO,CAACL;AAA5B,OAAD,CAARH;AACD;AACF;;AAED,WAAA,OAAA,CAAA,EAAA,EAAA,KAAA,EAAoC;AAClCD,IAAAA,MAAM,GAAGX,MAAM,CAAfW,OAAAA;AACA,QAAII,QAAQ,GAAGC,cAAc,CAACI,OAAO,CAAR,QAAA,EAAA,EAAA,EAA7B,KAA6B,CAA7B;AACA,QAAA,gBAAA,EAAsB8B,gBAAgB,CAAA,QAAA,EAAhBA,EAAgB,CAAhBA;AAEtB,QAAIC,YAAY,GAAGC,eAAe,CAAlC,QAAkC,CAAlC;AACA,QAAId,GAAG,GAAGlB,OAAO,CAAPA,UAAAA,CAAV,QAAUA,CAAV;AACAW,IAAAA,aAAa,CAAbA,YAAAA,CAAAA,YAAAA,EAAAA,EAAAA,EAAAA,GAAAA;;AAEA,QAAI3B,QAAQ,IAAZ,QAAA,EAA0B;AACxBQ,MAAAA,QAAQ,CAAC;AAAA,QAAA,MAAA;AAAUG,QAAAA,QAAQ,EAAEK,OAAO,CAACL;AAA5B,OAAD,CAARH;AACD;AACF;;AAED,MAAIQ,OAAO,GAAY;AACrB,QAAA,MAAA,GAAU;AACR,aAAA,MAAA;AAFmB,KAAA;;AAIrB,QAAA,QAAA,GAAY;AACV,aAAOiC,WAAW,CAAA,MAAA,EAAlB,aAAkB,CAAlB;AALmB,KAAA;;AAOrBzB,IAAAA,MAAM,CAAA,EAAA,EAAa;AACjB,UAAA,QAAA,EAAc;AACZ,cAAM,IAAA,KAAA,CAAN,4CAAM,CAAN;AACD;;AACDE,MAAAA,MAAM,CAANA,gBAAAA,CAAAA,iBAAAA,EAAAA,SAAAA;AACAlB,MAAAA,QAAQ,GAARA,EAAAA;AAEA,aAAO,MAAK;AACVkB,QAAAA,MAAM,CAANA,mBAAAA,CAAAA,iBAAAA,EAAAA,SAAAA;AACAlB,QAAAA,QAAQ,GAARA,IAAAA;AAFF,OAAA;AAdmB,KAAA;;AAmBrBS,IAAAA,UAAU,CAAA,EAAA,EAAG;AACX,aAAOA,UAAU,CAAA,MAAA,EAAjB,EAAiB,CAAjB;AApBmB,KAAA;;AAsBrBE,IAAAA,cAAc,CAAA,QAAA,EAAS;AACrB;AACA,UAAIe,GAAG,GAAGgB,SAAS,CAAChC,UAAU,CAA9B,QAA8B,CAAX,CAAnB;AACA,aAAA,QAAA,CAAA,EAAA,EAAA,QAAA,EAAA;AAEEW,QAAAA,QAAQ,EAAEK,GAAG,CAFf,QAAA;AAGEJ,QAAAA,MAAM,EAAEI,GAAG,CAHb,MAAA;AAIET,QAAAA,IAAI,EAAES,GAAG,CAACT;AAJZ,OAAA,CAAA;AAzBmB,KAAA;;AAAA,IAAA,IAAA;AAAA,IAAA,OAAA;;AAkCrBF,IAAAA,EAAE,CAAA,CAAA,EAAE;AACF,aAAOI,aAAa,CAAbA,EAAAA,CAAP,CAAOA,CAAP;AACD;;AApCoB,GAAvB;AAuCA,SAAA,OAAA;AACD,C,CAAA;;;ACtoBD,IAAA,UAAA;;AAAA,CAAA,UAAA,UAAA,EAAsB;AACpBwB,EAAAA,UAAAA,CAAAA,MAAAA,CAAAA,GAAAA,MAAAA;AACAA,EAAAA,UAAAA,CAAAA,UAAAA,CAAAA,GAAAA,UAAAA;AACAA,EAAAA,UAAAA,CAAAA,UAAAA,CAAAA,GAAAA,UAAAA;AACAA,EAAAA,UAAAA,CAAAA,OAAAA,CAAAA,GAAAA,OAAAA;AAJF,CAAA,EAAYA,UAAU,KAAVA,UAAU,GAAtB,EAAsB,CAAtB;;AA4PA,SAAA,YAAA,CAAA,KAAA,EAC4B;AAE1B,SAAOC,KAAK,CAALA,KAAAA,KAAP,IAAA;AACD,C,CAAA;AAGD;;;AACM,SAAA,yBAAA,CAAA,MAAA,EAAA,UAAA,EAAA,MAAA,EAGmC;AAAA,MADvCC,UACuC,KAAA,KAAA,CAAA,EAAA;AADvCA,IAAAA,UACuC,GADhB,EAAvBA;AACuC;;AAAA,MAAvCC,MAAuC,KAAA,KAAA,CAAA,EAAA;AAAvCA,IAAAA,MAAuC,GAAjB,IAAA,GAAA,EAAtBA;AAAuC;;AAEvC,SAAO,MAAM,CAAN,GAAA,CAAW,CAAA,KAAA,EAAA,KAAA,KAAiB;AACjC,QAAIC,QAAQ,GAAG,CAAC,GAAD,UAAA,EAAf,KAAe,CAAf;AACA,QAAIC,EAAE,GAAG,OAAOJ,KAAK,CAAZ,EAAA,KAAA,QAAA,GAA+BA,KAAK,CAApC,EAAA,GAA0CG,QAAQ,CAARA,IAAAA,CAAnD,GAAmDA,CAAnD;AACAE,IAAAA,SAAS,CACPL,KAAK,CAALA,KAAAA,KAAAA,IAAAA,IAAwB,CAACA,KAAK,CADvB,QAAA,EAATK,2CAAS,CAATA;AAIAA,IAAAA,SAAS,CACP,CAACH,MAAM,CAANA,GAAAA,CADM,EACNA,CADM,EAEP,wCAAA,EAAA,GAAA,aAAA,GAFFG,wDAAS,CAATA;AAKAH,IAAAA,MAAM,CAANA,GAAAA,CAAAA,EAAAA;;AAEA,QAAII,YAAY,CAAhB,KAAgB,CAAhB,EAAyB;AACvB,UAAIC,UAAU,GAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAA6CH,QAAAA;AAA7C,OAAA,CAAd;;AACA,aAAA,UAAA;AAFF,KAAA,MAGO;AACL,UAAII,iBAAiB,GAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAA,QAAA,EAAA;AAGnBC,QAAAA,QAAQ,EAAET,KAAK,CAALA,QAAAA,GACNU,yBAAyB,CAACV,KAAK,CAAN,QAAA,EAAA,QAAA,EADnBA,MACmB,CADnBA,GAENW;AALe,OAAA,CAArB;;AAOA,aAAA,iBAAA;AACD;AA1BH,GAAO,CAAP;AA4BD;AAED;;;;AAIG;;;AACG,SAAA,WAAA,CAAA,MAAA,EAAA,WAAA,EAAA,QAAA,EAKU;AAAA,MAAdC,QAAc,KAAA,KAAA,CAAA,EAAA;AAAdA,IAAAA,QAAc,GAAH,GAAXA;AAAc;;AAEd,MAAIrD,QAAQ,GACV,OAAA,WAAA,KAAA,QAAA,GAAkCoB,SAAS,CAA3C,WAA2C,CAA3C,GADF,WAAA;AAGA,MAAIF,QAAQ,GAAGoC,aAAa,CAACtD,QAAQ,CAARA,QAAAA,IAAD,GAAA,EAA5B,QAA4B,CAA5B;;AAEA,MAAIkB,QAAQ,IAAZ,IAAA,EAAsB;AACpB,WAAA,IAAA;AACD;;AAED,MAAIqC,QAAQ,GAAGC,aAAa,CAA5B,MAA4B,CAA5B;AACAC,EAAAA,iBAAiB,CAAjBA,QAAiB,CAAjBA;AAEA,MAAIC,OAAO,GAAX,IAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBD,OAAO,IAAPA,IAAAA,IAAmBC,CAAC,GAAGJ,QAAQ,CAA/C,MAAA,EAAwD,EAAxD,CAAA,EAA6D;AAC3DG,IAAAA,OAAO,GAAGE,gBAAgB,CACxBL,QAAQ,CADgB,CAChB,CADgB,EAAA;AAGxB;AACA;AACA;AACA;AACA;AACAM,IAAAA,eAAe,CARjBH,QAQiB,CARS,CAA1BA;AAUD;;AAED,SAAA,OAAA;AACD;;AAmBD,SAAA,aAAA,CAAA,MAAA,EAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAMiB;AAAA,MAFfH,QAEe,KAAA,KAAA,CAAA,EAAA;AAFfA,IAAAA,QAEe,GAF4B,EAA3CA;AAEe;;AAAA,MADfO,WACe,KAAA,KAAA,CAAA,EAAA;AADfA,IAAAA,WACe,GAD6B,EAA5CA;AACe;;AAAA,MAAfpB,UAAe,KAAA,KAAA,CAAA,EAAA;AAAfA,IAAAA,UAAe,GAAF,EAAbA;AAAe;;AAEfqB,EAAAA,MAAM,CAANA,OAAAA,CAAe,CAAA,KAAA,EAAA,KAAA,KAAiB;AAC9B,QAAIC,IAAI,GAA+B;AACrCC,MAAAA,YAAY,EAAExB,KAAK,CAALA,IAAAA,IADuB,EAAA;AAErCyB,MAAAA,aAAa,EAAEzB,KAAK,CAALA,aAAAA,KAFsB,IAAA;AAGrC0B,MAAAA,aAAa,EAHwB,KAAA;AAIrC1B,MAAAA;AAJqC,KAAvC;;AAOA,QAAIuB,IAAI,CAAJA,YAAAA,CAAAA,UAAAA,CAAJ,GAAIA,CAAJ,EAAuC;AACrClB,MAAAA,SAAS,CACPkB,IAAI,CAAJA,YAAAA,CAAAA,UAAAA,CADO,UACPA,CADO,EAEP,2BAAwBA,IAAI,CAA5B,YAAA,GACMtB,uBADN,IACMA,OADN,UACMA,GADN,gDAAA,IAFFI,6DAAS,CAATA;AAOAkB,MAAAA,IAAI,CAAJA,YAAAA,GAAoBA,IAAI,CAAJA,YAAAA,CAAAA,KAAAA,CAAwBtB,UAAU,CAAtDsB,MAAoBA,CAApBA;AACD;;AAED,QAAIhC,IAAI,GAAGoC,SAAS,CAAC,CAAA,UAAA,EAAaJ,IAAI,CAAtC,YAAqB,CAAD,CAApB;AACA,QAAIK,UAAU,GAAGP,WAAW,CAAXA,MAAAA,CApBa,IAoBbA,CAAjB,CApB8B,CAAA;AAuB9B;AACA;;AACA,QAAIrB,KAAK,CAALA,QAAAA,IAAkBA,KAAK,CAALA,QAAAA,CAAAA,MAAAA,GAAtB,CAAA,EAAiD;AAC/CK,MAAAA,SAAS,EAAA;AAEP;AACAL,MAAAA,KAAK,CAALA,KAAAA,KAHO,IAAA,EAIP,6DACuCT,wCADvC,IACuCA,GALzCc,KAIE,CAJO,CAATA;AAQAU,MAAAA,aAAa,CAACf,KAAK,CAAN,QAAA,EAAA,QAAA,EAAA,UAAA,EAAbe,IAAa,CAAbA;AAlC4B,KAAA,CAAA;AAsC9B;;;AACA,QAAIf,KAAK,CAALA,IAAAA,IAAAA,IAAAA,IAAsB,CAACA,KAAK,CAAhC,KAAA,EAAwC;AACtC;AACD;;AAEDc,IAAAA,QAAQ,CAARA,IAAAA,CAAc;AAAA,MAAA,IAAA;AAAQe,MAAAA,KAAK,EAAEC,YAAY,CAAA,IAAA,EAAO9B,KAAK,CAAvC,KAA2B,CAA3B;AAAgD4B,MAAAA;AAAhD,KAAdd;AA3CFQ,GAAAA;AA8CA,SAAA,QAAA;AACD;;AAED,SAAA,iBAAA,CAAA,QAAA,EAAkD;AAChDR,EAAAA,QAAQ,CAARA,IAAAA,CAAc,CAAA,CAAA,EAAA,CAAA,KACZiB,CAAC,CAADA,KAAAA,KAAYC,CAAC,CAAbD,KAAAA,GACIC,CAAC,CAADA,KAAAA,GAAUD,CAAC,CADfA,KAAAA,CAAAA;AAAAA,IAEIE,cAAc,CACZF,CAAC,CAADA,UAAAA,CAAAA,GAAAA,CAAkBR,IAAD,IAAUA,IAAI,CADnB,aACZQ,CADY,EAEZC,CAAC,CAADA,UAAAA,CAAAA,GAAAA,CAAkBT,IAAD,IAAUA,IAAI,CALvCT,aAKQkB,CAFY,CAHpBlB;AAQD;;AAED,MAAMoB,OAAO,GAAb,QAAA;AACA,MAAMC,mBAAmB,GAAzB,CAAA;AACA,MAAMC,eAAe,GAArB,CAAA;AACA,MAAMC,iBAAiB,GAAvB,CAAA;AACA,MAAMC,kBAAkB,GAAxB,EAAA;AACA,MAAMC,YAAY,GAAG,CAArB,CAAA;;AACA,MAAMC,OAAO,GAAIC,CAAD,IAAeA,CAAC,KAAhC,GAAA;;AAEA,SAAA,YAAA,CAAA,IAAA,EAAA,KAAA,EAA8D;AAC5D,MAAIC,QAAQ,GAAGnD,IAAI,CAAJA,KAAAA,CAAf,GAAeA,CAAf;AACA,MAAIoD,YAAY,GAAGD,QAAQ,CAA3B,MAAA;;AACA,MAAIA,QAAQ,CAARA,IAAAA,CAAJ,OAAIA,CAAJ,EAA4B;AAC1BC,IAAAA,YAAY,IAAZA,YAAAA;AACD;;AAED,MAAA,KAAA,EAAW;AACTA,IAAAA,YAAY,IAAZA,eAAAA;AACD;;AAED,SAAOD,QAAQ,CAARA,MAAAA,CACID,CAAD,IAAO,CAACD,OAAO,CADlBE,CACkB,CADlBA,EAAAA,MAAAA,CAGH,CAAA,KAAA,EAAA,OAAA,KACEb,KAAK,IACJK,OAAO,CAAPA,IAAAA,CAAAA,OAAAA,IAAAA,mBAAAA,GAEGU,OAAO,KAAPA,EAAAA,GAAAA,iBAAAA,GAPHF,kBAII,CAJJA,EAAP,YAAOA,CAAP;AAYD;;AAED,SAAA,cAAA,CAAA,CAAA,EAAA,CAAA,EAAgD;AAC9C,MAAIG,QAAQ,GACVd,CAAC,CAADA,MAAAA,KAAaC,CAAC,CAAdD,MAAAA,IAAyBA,CAAC,CAADA,KAAAA,CAAAA,CAAAA,EAAW,CAAXA,CAAAA,EAAAA,KAAAA,CAAqB,CAAA,CAAA,EAAA,CAAA,KAAUe,CAAC,KAAKd,CAAC,CADjE,CACiE,CAAtCD,CAD3B;AAGA,SAAOc,QAAQ,GAAA;AAEX;AACA;AACA;AACAd,EAAAA,CAAC,CAACA,CAAC,CAADA,MAAAA,GAAFA,CAAC,CAADA,GAAkBC,CAAC,CAACA,CAAC,CAADA,MAAAA,GALT,CAKQ,CALR,GAAA;AAOX;AAPJ,GAAA;AASD;;AAED,SAAA,gBAAA,CAAA,MAAA,EAAA,QAAA,EAKkB;AAEhB,MAAI;AAAEJ,IAAAA;AAAF,MAAJ,MAAA;AAEA,MAAImB,aAAa,GAAjB,EAAA;AACA,MAAIC,eAAe,GAAnB,GAAA;AACA,MAAI/B,OAAO,GAAX,EAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGU,UAAU,CAA9B,MAAA,EAAuC,EAAvC,CAAA,EAA4C;AAC1C,QAAIL,IAAI,GAAGK,UAAU,CAArB,CAAqB,CAArB;AACA,QAAIqB,GAAG,GAAG/B,CAAC,KAAKU,UAAU,CAAVA,MAAAA,GAAhB,CAAA;AACA,QAAIsB,iBAAiB,GACnBF,eAAe,KAAfA,GAAAA,GAAAA,QAAAA,GAEIvE,QAAQ,CAARA,KAAAA,CAAeuE,eAAe,CAA9BvE,MAAAA,KAHN,GAAA;AAIA,QAAI0E,KAAK,GAAGC,SAAS,CACnB;AAAE7D,MAAAA,IAAI,EAAEgC,IAAI,CAAZ,YAAA;AAA2BE,MAAAA,aAAa,EAAEF,IAAI,CAA9C,aAAA;AAA8D0B,MAAAA;AAA9D,KADmB,EAArB,iBAAqB,CAArB;AAKA,QAAI,CAAJ,KAAA,EAAY,OAAA,IAAA;AAEZI,IAAAA,MAAM,CAANA,MAAAA,CAAAA,aAAAA,EAA6BF,KAAK,CAAlCE,MAAAA;AAEA,QAAIrD,KAAK,GAAGuB,IAAI,CAAhB,KAAA;AAEAN,IAAAA,OAAO,CAAPA,IAAAA,CAAa;AACX;AACAqC,MAAAA,MAAM,EAFK,aAAA;AAGX7E,MAAAA,QAAQ,EAAEkD,SAAS,CAAC,CAAA,eAAA,EAAkBwB,KAAK,CAHhC,QAGS,CAAD,CAHR;AAIXI,MAAAA,YAAY,EAAEC,iBAAiB,CAC7B7B,SAAS,CAAC,CAAA,eAAA,EAAkBwB,KAAK,CALxB,YAKC,CAAD,CADoB,CAJpB;AAOXnD,MAAAA;AAPW,KAAbiB;;AAUA,QAAIkC,KAAK,CAALA,YAAAA,KAAJ,GAAA,EAAgC;AAC9BH,MAAAA,eAAe,GAAGrB,SAAS,CAAC,CAAA,eAAA,EAAkBwB,KAAK,CAAnDH,YAA4B,CAAD,CAA3BA;AACD;AACF;;AAED,SAAA,OAAA;AACD;AAED;;;;AAIG;;;SACaS,Y,CACdlE,I,EACA+D,M,EAEa;AAAA,MAFbA,MAEa,KAAA,KAAA,CAAA,EAAA;AAFbA,IAAAA,MAEa,GAAT,EAFJA;AAEa;;AAEb,SAAO,IAAI,CAAJ,OAAA,CAAA,SAAA,EACe,CAAA,CAAA,EAAA,GAAA,KAA4B;AAC9CjD,IAAAA,SAAS,CAACiD,MAAM,CAANA,GAAM,CAANA,IAAD,IAAA,EAAmCpE,gBAAnC,GAAmCA,GAA5CmB,UAAS,CAATA;AACA,WAAOiD,MAAM,CAAb,GAAa,CAAb;AAHG,GAAA,EAAA,OAAA,CAAA,SAAA,EAKe,CAAA,CAAA,EAAA,MAAA,EAAA,EAAA,EAAA,GAAA,KAAuB;AACzC,UAAMI,IAAI,GAAV,GAAA;;AAEA,QAAIJ,MAAM,CAANA,IAAM,CAANA,IAAJ,IAAA,EAA0B;AACxB;AACA;AACA,aAAOK,GAAG,KAAHA,IAAAA,GAAAA,GAAAA,GAAP,EAAA;AANuC,KAAA,CAAA;;;AAUzC,WAAA,KAAA,MAAA,GAAmBL,MAAM,CAAzB,IAAyB,CAAzB;AAfJ,GAAO,CAAP;AAiBD;AAiDD;;;;;AAKG;;;AACa,SAAA,SAAA,CAAA,OAAA,EAAA,QAAA,EAKE;AAEhB,MAAI,OAAA,OAAA,KAAJ,QAAA,EAAiC;AAC/BM,IAAAA,OAAO,GAAG;AAAErE,MAAAA,IAAI,EAAN,OAAA;AAAiBkC,MAAAA,aAAa,EAA9B,KAAA;AAAuCwB,MAAAA,GAAG,EAAE;AAA5C,KAAVW;AACD;;AAED,MAAI,CAAA,OAAA,EAAA,UAAA,IAAwBC,WAAW,CACrCD,OAAO,CAD8B,IAAA,EAErCA,OAAO,CAF8B,aAAA,EAGrCA,OAAO,CAHT,GAAuC,CAAvC;AAMA,MAAIT,KAAK,GAAG1E,QAAQ,CAARA,KAAAA,CAAZ,OAAYA,CAAZ;AACA,MAAI,CAAJ,KAAA,EAAY,OAAA,IAAA;AAEZ,MAAIuE,eAAe,GAAGG,KAAK,CAA3B,CAA2B,CAA3B;AACA,MAAII,YAAY,GAAGP,eAAe,CAAfA,OAAAA,CAAAA,SAAAA,EAAnB,IAAmBA,CAAnB;AACA,MAAIc,aAAa,GAAGX,KAAK,CAALA,KAAAA,CAApB,CAAoBA,CAApB;AACA,MAAIG,MAAM,GAAW,UAAU,CAAV,MAAA,CACnB,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,KAA2B;AACzB;AACA;AACA,QAAIS,SAAS,KAAb,GAAA,EAAuB;AACrB,UAAIC,UAAU,GAAGF,aAAa,CAAbA,KAAa,CAAbA,IAAjB,EAAA;AACAP,MAAAA,YAAY,GAAGP,eAAe,CAAfA,KAAAA,CAAAA,CAAAA,EACHA,eAAe,CAAfA,MAAAA,GAAyBgB,UAAU,CADhChB,MAAAA,EAAAA,OAAAA,CAAAA,SAAAA,EAAfO,IAAeP,CAAfO;AAGD;;AAEDU,IAAAA,IAAI,CAAJA,SAAI,CAAJA,GAAkBC,wBAAwB,CACxCJ,aAAa,CAAbA,KAAa,CAAbA,IADwC,EAAA,EAA1CG,SAA0C,CAA1CA;AAIA,WAAA,IAAA;AAfiB,GAAA,EAArB,EAAqB,CAArB;AAoBA,SAAO;AAAA,IAAA,MAAA;AAELxF,IAAAA,QAAQ,EAFH,eAAA;AAAA,IAAA,YAAA;AAILmF,IAAAA;AAJK,GAAP;AAMD;;AAED,SAAA,WAAA,CAAA,IAAA,EAAA,aAAA,EAAA,GAAA,EAGY;AAAA,MADVnC,aACU,KAAA,KAAA,CAAA,EAAA;AADVA,IAAAA,aACU,GADM,KAAhBA;AACU;;AAAA,MAAVwB,GAAU,KAAA,KAAA,CAAA,EAAA;AAAVA,IAAAA,GAAU,GAAJ,IAANA;AAAU;;AAEVvF,EAAAA,OAAO,CACL6B,IAAI,KAAJA,GAAAA,IAAgB,CAACA,IAAI,CAAJA,QAAAA,CAAjBA,GAAiBA,CAAjBA,IAAuCA,IAAI,CAAJA,QAAAA,CADlC,IACkCA,CADlC,EAEL,kBAAA,IAAA,GAAA,mCAAA,IAAA,OACMA,IAAI,CAAJA,OAAAA,CAAAA,KAAAA,EADN,IACMA,CADN,GAAA,oCAAA,IAAA,kEAAA,IAAA,uCAGsCA,IAAI,CAAJA,OAAAA,CAAAA,KAAAA,EAHtC,IAGsCA,CAHtC,GAFF7B,KAEE,CAFK,CAAPA;AAQA,MAAIyG,UAAU,GAAd,EAAA;AACA,MAAIC,YAAY,GACd,MACA,IAAI,CAAJ,OAAA,CAAA,SAAA,EAAA,EAAA,EAC0B;AAD1B,GAAA,OAAA,CAAA,MAAA,EAAA,GAAA,EAEwB;AAFxB,GAAA,OAAA,CAAA,qBAAA,EAAA,MAAA,EAG0C;AAH1C,GAAA,OAAA,CAAA,SAAA,EAIsB,CAAA,CAAA,EAAA,SAAA,KAAiC;AACnDD,IAAAA,UAAU,CAAVA,IAAAA,CAAAA,SAAAA;AACA,WAAA,WAAA;AARN,GAEE,CAFF;;AAWA,MAAI5E,IAAI,CAAJA,QAAAA,CAAJ,GAAIA,CAAJ,EAAwB;AACtB4E,IAAAA,UAAU,CAAVA,IAAAA,CAAAA,GAAAA;AACAC,IAAAA,YAAY,IACV7E,IAAI,KAAJA,GAAAA,IAAgBA,IAAI,KAApBA,IAAAA,GAAAA,OAAAA,CAAAA;AAAAA,MAHoB,mBAEtB6E,CAFsB,CAAA;AAAxB,GAAA,MAMO,IAAA,GAAA,EAAS;AACd;AACAA,IAAAA,YAAY,IAAZA,OAAAA;AAFK,GAAA,MAGA,IAAI7E,IAAI,KAAJA,EAAAA,IAAeA,IAAI,KAAvB,GAAA,EAAiC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA6E,IAAAA,YAAY,IAAZA,eAAAA;AARK,GAAA,MASA;;AAIP,MAAIC,OAAO,GAAG,IAAA,MAAA,CAAA,YAAA,EAAyB5C,aAAa,GAAA,SAAA,GAApD,GAAc,CAAd;AAEA,SAAO,CAAA,OAAA,EAAP,UAAO,CAAP;AACD;;AAED,SAAA,eAAA,CAAA,KAAA,EAAsC;AACpC,MAAI;AACF,WAAO6C,SAAS,CAAhB,KAAgB,CAAhB;AADF,GAAA,CAEE,OAAA,KAAA,EAAc;AACd5G,IAAAA,OAAO,CAAA,KAAA,EAEL,oBAAA,KAAA,GAEe6G,6CAFf,GAEeA,+DAFf,IAEeA,eAFf,KAEeA,GAJjB7G,IAEE,CAFK,CAAPA;AAOA,WAAA,KAAA;AACD;AACF;;AAED,SAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,EAAkE;AAChE,MAAI;AACF,WAAO8G,kBAAkB,CAAzB,KAAyB,CAAzB;AADF,GAAA,CAEE,OAAA,KAAA,EAAc;AACd9G,IAAAA,OAAO,CAAA,KAAA,EAEL,mCAAA,SAAA,GAAA,gCAAA,IAAA,mBAAA,KAAA,GAAA,iDAAA,KAAA,qCAAA,KAAA,GAFFA,IAEE,CAFK,CAAPA;AAOA,WAAA,KAAA;AACD;AACF;AAED;;AAEG;;;AACa,SAAA,aAAA,CAAA,QAAA,EAAA,QAAA,EAEE;AAEhB,MAAIkD,QAAQ,KAAZ,GAAA,EAAsB,OAAA,QAAA;;AAEtB,MAAI,CAACnC,QAAQ,CAARA,WAAAA,GAAAA,UAAAA,CAAkCmC,QAAQ,CAA/C,WAAuCA,EAAlCnC,CAAL,EAAgE;AAC9D,WAAA,IAAA;AALc,GAAA,CAAA;AAShB;;;AACA,MAAIgG,UAAU,GAAG7D,QAAQ,CAARA,QAAAA,CAAAA,GAAAA,IACbA,QAAQ,CAARA,MAAAA,GADaA,CAAAA,GAEbA,QAAQ,CAFZ,MAAA;AAGA,MAAI8D,QAAQ,GAAGjG,QAAQ,CAARA,MAAAA,CAAf,UAAeA,CAAf;;AACA,MAAIiG,QAAQ,IAAIA,QAAQ,KAAxB,GAAA,EAAkC;AAChC;AACA,WAAA,IAAA;AACD;;AAED,SAAOjG,QAAQ,CAARA,KAAAA,CAAAA,UAAAA,KAAP,GAAA;AACD;;AAUe,SAAA,SAAA,CAAA,KAAA,EAAA,OAAA,EAAsC;AACpD,MAAIkG,KAAK,KAALA,KAAAA,IAAmBA,KAAK,KAAxBA,IAAAA,IAAqC,OAAA,KAAA,KAAzC,WAAA,EAAuE;AACrE,UAAM,IAAA,KAAA,CAAN,OAAM,CAAN;AACD;AACF;AAED;;AAEG;;;AACa,SAAA,OAAA,CAAA,IAAA,EAAA,OAAA,EAAkC;AAChD,MAAI,CAAJ,IAAA,EAAW;AACT;AACA,QAAI,OAAA,OAAA,KAAJ,WAAA,EAAoC3F,OAAO,CAAPA,IAAAA,CAAAA,OAAAA;;AAEpC,QAAI;AACF;AACA;AACA;AACA;AACA;AACA,YAAM,IAAA,KAAA,CANJ,OAMI,CAAN,CANE,CAAA;AAAJ,KAAA,CAQE,OAAA,CAAA,EAAU,CAAE;AACf;AACF;AAED;;;;AAIG;;;SACa4F,W,CAAYxF,E,EAAQyF,Y,EAAkB;AAAA,MAAlBA,YAAkB,KAAA,KAAA,CAAA,EAAA;AAAlBA,IAAAA,YAAkB,GAAH,GAAfA;AAAkB;;AACpD,MAAI;AACFpG,IAAAA,QAAQ,EADN,UAAA;AAEFC,IAAAA,MAAM,GAFJ,EAAA;AAGFL,IAAAA,IAAI,GAAG;AAHL,MAIA,OAAA,EAAA,KAAA,QAAA,GAAyBM,SAAS,CAAlC,EAAkC,CAAlC,GAJJ,EAAA;AAMA,MAAIF,QAAQ,GAAGqG,UAAU,GACrBA,UAAU,CAAVA,UAAAA,CAAAA,GAAAA,IAAAA,UAAAA,GAEEC,eAAe,CAAA,UAAA,EAHI,YAGJ,CAHI,GAAzB,YAAA;AAMA,SAAO;AAAA,IAAA,QAAA;AAELrG,IAAAA,MAAM,EAAEsG,eAAe,CAFlB,MAEkB,CAFlB;AAGL3G,IAAAA,IAAI,EAAE4G,aAAa,CAAA,IAAA;AAHd,GAAP;AAKD;;AAED,SAAA,eAAA,CAAA,YAAA,EAAA,YAAA,EAAmE;AACjE,MAAIvC,QAAQ,GAAGmC,YAAY,CAAZA,OAAAA,CAAAA,MAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAf,GAAeA,CAAf;AACA,MAAIK,gBAAgB,GAAG1D,YAAY,CAAZA,KAAAA,CAAvB,GAAuBA,CAAvB;AAEA0D,EAAAA,gBAAgB,CAAhBA,OAAAA,CAA0BtC,OAAD,IAAY;AACnC,QAAIA,OAAO,KAAX,IAAA,EAAsB;AACpB;AACA,UAAIF,QAAQ,CAARA,MAAAA,GAAJ,CAAA,EAAyBA,QAAQ,CAARA,GAAAA;AAF3B,KAAA,MAGO,IAAIE,OAAO,KAAX,GAAA,EAAqB;AAC1BF,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,OAAAA;AACD;AANHwC,GAAAA;AASA,SAAOxC,QAAQ,CAARA,MAAAA,GAAAA,CAAAA,GAAsBA,QAAQ,CAARA,IAAAA,CAAtBA,GAAsBA,CAAtBA,GAAP,GAAA;AACD;;AAED,SAAA,mBAAA,CAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAIqB;AAEnB,SACE,uBAAA,IAAA,GACQyC,sCADR,IACQA,SADR,KACQA,GAAkBxH,WAAlBwH,GAAkBxH,IAAI,CAAJA,SAAAA,CAD1B,IAC0BA,CAAlBwH,GADR,oCAAA,KAAA,SAAA,IAAA,GADF,0DACE,IADF,qEAAA;AAQD;AAED;;;;;;;;;;;;;;;;;;;;;;AAsBG;;;AACG,SAAA,0BAAA,CAAA,OAAA,EAEQ;AACZ,SAAOlE,OAAO,CAAPA,MAAAA,CACL,CAAA,KAAA,EAAA,KAAA,KACEjE,KAAK,KAALA,CAAAA,IAAgBmG,KAAK,CAALA,KAAAA,CAAAA,IAAAA,IAAoBA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAAAA,MAAAA,GAFxC,CAAOlC,CAAP;AAID;AAED;;AAEG;;;AACG,SAAA,SAAA,CAAA,KAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,cAAA,EAIkB;AAAA,MAAtBmE,cAAsB,KAAA,KAAA,CAAA,EAAA;AAAtBA,IAAAA,cAAsB,GAAL,KAAjBA;AAAsB;;AAEtB,MAAA,EAAA;;AACA,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7BhG,IAAAA,EAAE,GAAGT,SAAS,CAAdS,KAAc,CAAdA;AADF,GAAA,MAEO;AACLA,IAAAA,EAAE,GAAA,QAAA,CAAA,EAAA,EAAFA,KAAE,CAAFA;AAEAiB,IAAAA,SAAS,CACP,CAACjB,EAAE,CAAH,QAAA,IAAgB,CAACA,EAAE,CAAFA,QAAAA,CAAAA,QAAAA,CADV,GACUA,CADV,EAEPiG,mBAAmB,CAAA,GAAA,EAAA,UAAA,EAAA,QAAA,EAFrBhF,EAEqB,CAFZ,CAATA;AAIAA,IAAAA,SAAS,CACP,CAACjB,EAAE,CAAH,QAAA,IAAgB,CAACA,EAAE,CAAFA,QAAAA,CAAAA,QAAAA,CADV,GACUA,CADV,EAEPiG,mBAAmB,CAAA,GAAA,EAAA,UAAA,EAAA,MAAA,EAFrBhF,EAEqB,CAFZ,CAATA;AAIAA,IAAAA,SAAS,CACP,CAACjB,EAAE,CAAH,MAAA,IAAc,CAACA,EAAE,CAAFA,MAAAA,CAAAA,QAAAA,CADR,GACQA,CADR,EAEPiG,mBAAmB,CAAA,GAAA,EAAA,QAAA,EAAA,MAAA,EAFrBhF,EAEqB,CAFZ,CAATA;AAID;;AAED,MAAIiF,WAAW,GAAGC,KAAK,KAALA,EAAAA,IAAgBnG,EAAE,CAAFA,QAAAA,KAAlC,EAAA;AACA,MAAI0F,UAAU,GAAGQ,WAAW,GAAA,GAAA,GAASlG,EAAE,CAAvC,QAAA;AAEA,MAzBsB,IAyBtB,CAzBsB,CAAA;AA4BtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIgG,cAAc,IAAIN,UAAU,IAAhC,IAAA,EAA0C;AACxCU,IAAAA,IAAI,GAAJA,gBAAAA;AADF,GAAA,MAEO;AACL,QAAIC,kBAAkB,GAAGC,cAAc,CAAdA,MAAAA,GAAzB,CAAA;;AAEA,QAAIZ,UAAU,CAAVA,UAAAA,CAAJ,IAAIA,CAAJ,EAAiC;AAC/B,UAAIa,UAAU,GAAGb,UAAU,CAAVA,KAAAA,CADc,GACdA,CAAjB,CAD+B,CAAA;AAI/B;AACA;;AACA,aAAOa,UAAU,CAAVA,CAAU,CAAVA,KAAP,IAAA,EAA+B;AAC7BA,QAAAA,UAAU,CAAVA,KAAAA;AACAF,QAAAA,kBAAkB,IAAlBA,CAAAA;AACD;;AAEDrG,MAAAA,EAAE,CAAFA,QAAAA,GAAcuG,UAAU,CAAVA,IAAAA,CAAdvG,GAAcuG,CAAdvG;AAdG,KAAA,CAAA;AAkBL;;;AACAoG,IAAAA,IAAI,GAAGC,kBAAkB,IAAlBA,CAAAA,GAA0BC,cAAc,CAAxCD,kBAAwC,CAAxCA,GAAPD,GAAAA;AACD;;AAED,MAAIjG,IAAI,GAAGqF,WAAW,CAAA,EAAA,EA5DA,IA4DA,CAAtB,CA5DsB,CAAA;;AA+DtB,MAAIgB,wBAAwB,GAC1Bd,UAAU,IAAIA,UAAU,KAAxBA,GAAAA,IAAoCA,UAAU,CAAVA,QAAAA,CAhEhB,GAgEgBA,CADtC,CA/DsB,CAAA;;AAkEtB,MAAIe,uBAAuB,GACzB,CAACP,WAAW,IAAIR,UAAU,KAA1B,GAAA,KAAuCgB,gBAAgB,CAAhBA,QAAAA,CADzC,GACyCA,CADzC;;AAEA,MACE,CAACvG,IAAI,CAAJA,QAAAA,CAAAA,QAAAA,CAAD,GAACA,CAAD,KACCqG,wBAAwB,IAF3B,uBACE,CADF,EAGE;AACArG,IAAAA,IAAI,CAAJA,QAAAA,IAAAA,GAAAA;AACD;;AAED,SAAA,IAAA;AACD;AAED;;AAEG;;;AACG,SAAA,aAAA,CAAA,EAAA,EAA8B;AAClC;AACA,SAAOH,EAAE,KAAFA,EAAAA,IAAcA,EAAW,CAAXA,QAAAA,KAAdA,EAAAA,GAAAA,GAAAA,GAEH,OAAA,EAAA,KAAA,QAAA,GACAT,SAAS,CAATA,EAAS,CAATA,CADA,QAAA,GAEAS,EAAE,CAJN,QAAA;AAKD;AAED;;AAEG;;;MACUuC,SAAS,GAAIoE,KAAD,IACvBA,KAAK,CAALA,IAAAA,CAAAA,GAAAA,EAAAA,OAAAA,CAAAA,QAAAA,EADK,GACLA,C;AAEF;;AAEG;;;MACUvC,iBAAiB,GAAI/E,QAAD,IAC/BA,QAAQ,CAARA,OAAAA,CAAAA,MAAAA,EAAAA,EAAAA,EAAAA,OAAAA,CAAAA,MAAAA,EADK,GACLA,C;AAEF;;AAEG;;;AACI,MAAMuG,eAAe,GAAItG,MAAD,IAC7B,CAAA,MAAA,IAAWA,MAAM,KAAjB,GAAA,GAAA,EAAA,GAEIA,MAAM,CAANA,UAAAA,CAAAA,GAAAA,IAAAA,MAAAA,GAEA,MALC,MAAA;AAOP;;AAEG;;;AACI,MAAMuG,aAAa,GAAI5G,IAAD,IAC3B,CAAA,IAAA,IAASA,IAAI,KAAb,GAAA,GAAA,EAAA,GAA6BA,IAAI,CAAJA,UAAAA,CAAAA,GAAAA,IAAAA,IAAAA,GAA8B,MADtD,IAAA;AAQP;;;AAGG;;;AACI,MAAM2H,IAAI,GAAiB,SAArBA,IAAqB,CAAA,IAAA,EAAA,IAAA,EAAoB;AAAA,MAAbC,IAAa,KAAA,KAAA,CAAA,EAAA;AAAbA,IAAAA,IAAa,GAAN,EAAPA;AAAa;;AACpD,MAAIC,YAAY,GAAG,OAAA,IAAA,KAAA,QAAA,GAA2B;AAAEC,IAAAA,MAAM,EAAEF;AAAV,GAA3B,GAAnB,IAAA;AAEA,MAAIG,OAAO,GAAG,IAAA,OAAA,CAAYF,YAAY,CAAtC,OAAc,CAAd;;AACA,MAAI,CAACE,OAAO,CAAPA,GAAAA,CAAL,cAAKA,CAAL,EAAkC;AAChCA,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,cAAAA,EAAAA,iCAAAA;AACD;;AAED,SAAO,IAAA,QAAA,CAAazI,IAAI,CAAJA,SAAAA,CAAb,IAAaA,CAAb,EAAA,QAAA,CAAA,EAAA,EAAA,YAAA,EAAA;AAELyI,IAAAA;AAFK,GAAA,CAAA,CAAP;AARK,CAAA;;AAoBD,MAAA,oBAAA,SAAA,KAAA,CAAyC;;MAElCC,Y,CAAY;AAQvBC,EAAAA,WAAAA,CAAAA,IAAAA,EAAyC;AAPjC,SAAA,WAAA,GAAoC,IAApC,GAAoC,EAApC;AAIA,SAAA,UAAA,GAAA,SAAA;AAINjG,IAAAA,SAAS,CACPkG,IAAI,IAAI,OAAA,IAAA,KAARA,QAAAA,IAAoC,CAACC,KAAK,CAALA,OAAAA,CAD9B,IAC8BA,CAD9B,EAD8B,oCAC9B,CAATnG,CADuC,CAAA;AAOvC;;AACA,QAAA,MAAA;AACA,SAAA,YAAA,GAAoB,IAAA,OAAA,CAAY,CAAA,CAAA,EAAA,CAAA,KAAWoG,MAAM,GAAjD,CAAoB,CAApB;AACA,SAAA,UAAA,GAAkB,IAAlB,eAAkB,EAAlB;;AACA,QAAIC,OAAO,GAAG,MACZD,MAAM,CAAC,IAAA,oBAAA,CADT,uBACS,CAAD,CADR;;AAEA,SAAA,mBAAA,GAA2B,MACzB,KAAA,UAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,OAAA,EADF,OACE,CADF;;AAEA,SAAA,UAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,OAAA;AAEA,SAAA,IAAA,GAAY,MAAM,CAAN,OAAA,CAAA,IAAA,EAAA,MAAA,CACV,CAAA,GAAA,EAAA,IAAA,KAAA;AAAA,UAAM,CAAA,GAAA,EAAN,KAAM,IAAN,IAAA;AAAA,aACE,MAAM,CAAN,MAAA,CAAA,GAAA,EAAmB;AACjB,SAAA,GAAA,GAAO,KAAA,YAAA,CAAA,GAAA,EAAA,KAAA;AADU,OAAnB,CADF;AADU,KAAA,EAAZ,EAAY,CAAZ;AAOD;;AAEOE,EAAAA,YAAY,CAAA,GAAA,EAAA,KAAA,EAEe;AAEjC,QAAI,EAAEhC,KAAK,YAAX,OAAI,CAAJ,EAAiC;AAC/B,aAAA,KAAA;AACD;;AAED,SAAA,WAAA,CAAA,GAAA,CANiC,GAMjC,EANiC,CAAA;AASjC;;AACA,QAAIiC,OAAO,GAAmBC,OAAO,CAAPA,IAAAA,CAAa,CAAA,KAAA,EAAQ,KAArBA,YAAa,CAAbA,EAAAA,IAAAA,CAC3BN,IAAD,IAAU,KAAA,QAAA,CAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EADkBM,IAClB,CADkBA,EAE3BtC,KAAD,IAAW,KAAA,QAAA,CAAA,OAAA,EAAA,GAAA,EAZoB,KAYpB,CAFiBsC,CAA9B,CAViC,CAAA;AAgBjC;;AACAD,IAAAA,OAAO,CAAPA,KAAAA,CAAc,MAAO,CAArBA,CAAAA;AAEAvD,IAAAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,UAAAA,EAA2C;AAAEyD,MAAAA,GAAG,EAAE,MAAM;AAAb,KAA3CzD;AACA,WAAA,OAAA;AACD;;AAEO0D,EAAAA,QAAQ,CAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAIA;AAEd,QACE,KAAA,UAAA,CAAA,MAAA,CAAA,OAAA,IACAxC,KAAK,YAFP,oBAAA,EAGE;AACA,WAAA,mBAAA;AACAlB,MAAAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,QAAAA,EAAyC;AAAEyD,QAAAA,GAAG,EAAE,MAAMvC;AAAb,OAAzClB;AACA,aAAOwD,OAAO,CAAPA,MAAAA,CAAP,KAAOA,CAAP;AACD;;AAED,SAAA,WAAA,CAAA,MAAA,CAAA,GAAA;;AAEA,QAAI,KAAJ,IAAA,EAAe;AACb;AACA,WAAA,mBAAA;AACD;;AAED,UAAMG,UAAU,GAAG,KAAnB,UAAA;;AACA,QAAA,KAAA,EAAW;AACT3D,MAAAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,QAAAA,EAAyC;AAAEyD,QAAAA,GAAG,EAAE,MAAMvC;AAAb,OAAzClB;AACA2D,MAAAA,UAAU,IAAIA,UAAU,CAAxBA,KAAwB,CAAxBA;AACA,aAAOH,OAAO,CAAPA,MAAAA,CAAP,KAAOA,CAAP;AACD;;AAEDxD,IAAAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,OAAAA,EAAwC;AAAEyD,MAAAA,GAAG,EAAE,MAAMP;AAAb,KAAxClD;AACA2D,IAAAA,UAAU,IAAIA,UAAU,CAAxBA,KAAwB,CAAxBA;AACA,WAAA,IAAA;AACD;;AAEDC,EAAAA,SAAS,CAAA,EAAA,EAA+B;AACtC,SAAA,UAAA,GAAA,EAAA;AACD;;AAEDC,EAAAA,MAAM,GAAA;AACJ,SAAA,UAAA,CAAA,KAAA;AACA,SAAA,WAAA,CAAA,OAAA,CAAyB,CAAA,CAAA,EAAA,CAAA,KAAU,KAAA,WAAA,CAAA,MAAA,CAAnC,CAAmC,CAAnC;AACA,QAAIF,UAAU,GAAG,KAAjB,UAAA;AACAA,IAAAA,UAAU,IAAIA,UAAU,CAAxBA,IAAwB,CAAxBA;AACD;;AAEgB,QAAXG,WAAW,CAAA,MAAA,EAAoB;AACnC,QAAIC,OAAO,GAAX,KAAA;;AACA,QAAI,CAAC,KAAL,IAAA,EAAgB;AACd,UAAIV,OAAO,GAAG,MAAM,KAApB,MAAoB,EAApB;;AACAW,MAAAA,MAAM,CAANA,gBAAAA,CAAAA,OAAAA,EAAAA,OAAAA;AACAD,MAAAA,OAAO,GAAG,MAAM,IAAA,OAAA,CAAaE,OAAD,IAAY;AACtC,aAAA,SAAA,CAAgBF,OAAD,IAAY;AACzBC,UAAAA,MAAM,CAANA,mBAAAA,CAAAA,OAAAA,EAAAA,OAAAA;;AACA,cAAID,OAAO,IAAI,KAAf,IAAA,EAA0B;AACxBE,YAAAA,OAAO,CAAPA,OAAO,CAAPA;AACD;AAJH,SAAA;AADFF,OAAgB,CAAhBA;AAQD;;AACD,WAAA,OAAA;AACD;;AAEO,MAAJG,IAAI,GAAA;AACN,WAAO,KAAA,WAAA,CAAA,IAAA,KAAP,CAAA;AACD;;AAEgB,MAAbC,aAAa,GAAA;AACfnH,IAAAA,SAAS,CACP,KAAA,IAAA,KAAA,IAAA,IAAsB,KADf,IAAA,EAATA,2DAAS,CAATA;AAKA,WAAO,MAAM,CAAN,OAAA,CAAe,KAAf,IAAA,EAAA,MAAA,CACL,CAAA,GAAA,EAAA,KAAA,KAAA;AAAA,UAAM,CAAA,GAAA,EAAN,KAAM,IAAN,KAAA;AAAA,aACE,MAAM,CAAN,MAAA,CAAA,GAAA,EAAmB;AACjB,SAAA,GAAA,GAAOoH,oBAAoB,CAAA,KAAA;AADV,OAAnB,CADF;AADK,KAAA,EAAP,EAAO,CAAP;AAOD;;AA1IsB;;AA6IzB,SAAA,gBAAA,CAAA,KAAA,EAAoC;AAClC,SACE9C,KAAK,YAALA,OAAAA,IAA6BA,KAAwB,CAAxBA,QAAAA,KAD/B,IAAA;AAGD;;AAED,SAAA,oBAAA,CAAA,KAAA,EAAwC;AACtC,MAAI,CAAC+C,gBAAgB,CAArB,KAAqB,CAArB,EAA8B;AAC5B,WAAA,KAAA;AACD;;AAED,MAAI/C,KAAK,CAAT,MAAA,EAAkB;AAChB,UAAMA,KAAK,CAAX,MAAA;AACD;;AACD,SAAOA,KAAK,CAAZ,KAAA;AACD;;AAEK,SAAA,KAAA,CAAA,IAAA,EAA6C;AACjD,SAAO,IAAA,YAAA,CAAP,IAAO,CAAP;AACD;AAOD;;;AAGG;;;AACI,MAAMgD,QAAQ,GAAqB,SAA7BA,QAA6B,CAAA,GAAA,EAAA,IAAA,EAAoB;AAAA,MAAd1B,IAAc,KAAA,KAAA,CAAA,EAAA;AAAdA,IAAAA,IAAc,GAAP,GAAPA;AAAc;;AAC5D,MAAIC,YAAY,GAAhB,IAAA;;AACA,MAAI,OAAA,YAAA,KAAJ,QAAA,EAAsC;AACpCA,IAAAA,YAAY,GAAG;AAAEC,MAAAA,MAAM,EAAED;AAAV,KAAfA;AADF,GAAA,MAEO,IAAI,OAAOA,YAAY,CAAnB,MAAA,KAAJ,WAAA,EAAgD;AACrDA,IAAAA,YAAY,CAAZA,MAAAA,GAAAA,GAAAA;AACD;;AAED,MAAIE,OAAO,GAAG,IAAA,OAAA,CAAYF,YAAY,CAAtC,OAAc,CAAd;AACAE,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,UAAAA,EAAAA,GAAAA;AAEA,SAAO,IAAA,QAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,YAAA,EAAA;AAELA,IAAAA;AAFK,GAAA,CAAA,CAAP;AAXK,CAAA;AAiBP;;;AAGG;;;MACUwB,a,CAAa;AAKxBtB,EAAAA,WAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAqE;AACnE,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,UAAA,GAAkBuB,UAAU,IAA5B,EAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACD;;AATuB;AAY1B;;;AAGG;;;AACG,SAAA,oBAAA,CAAA,CAAA,EAAqC;AACzC,SAAOC,CAAC,YAAR,aAAA;AACD;;AClvBM,MAAMC,eAAe,GAA6B;AACvDzK,EAAAA,KAAK,EADkD,MAAA;AAEvDC,EAAAA,QAAQ,EAF+C,SAAA;AAGvDyK,EAAAA,UAAU,EAH6C,SAAA;AAIvDC,EAAAA,UAAU,EAJ6C,SAAA;AAKvDC,EAAAA,WAAW,EAL4C,SAAA;AAMvDC,EAAAA,QAAQ,EAAExH;AAN6C,CAAlD;AASA,MAAMyH,YAAY,GAA0B;AACjD9K,EAAAA,KAAK,EAD4C,MAAA;AAEjDiJ,EAAAA,IAAI,EAF6C,SAAA;AAGjDyB,EAAAA,UAAU,EAHuC,SAAA;AAIjDC,EAAAA,UAAU,EAJuC,SAAA;AAKjDC,EAAAA,WAAW,EALsC,SAAA;AAMjDC,EAAAA,QAAQ,EAAExH;AANuC,CAA5C;AASP,MAAM0H,SAAS,GACb,OAAA,MAAA,KAAA,WAAA,IACA,OAAO/J,MAAM,CAAb,QAAA,KADA,WAAA,IAEA,OAAOA,MAAM,CAANA,QAAAA,CAAP,aAAA,KAHF,WAAA;AAIA,MAAMgK,QAAQ,GAAG,CAAjB,SAAA,C,CAAA;AAGA;AACA;AACA;;AAEA;;AAEG;;AACG,SAAA,YAAA,CAAA,IAAA,EAAuC;AAC3CjI,EAAAA,SAAS,CACP4F,IAAI,CAAJA,MAAAA,CAAAA,MAAAA,GADO,CAAA,EAAT5F,2DAAS,CAATA;AAKA,MAAIkI,UAAU,GAAG7H,yBAAyB,CAACuF,IAAI,CANJ,MAMD,CAA1C,CAN2C,CAAA;;AAQ3C,MAAIuC,eAAe,GARwB,IAQ3C,CAR2C,CAAA;;AAU3C,MAAIC,WAAW,GAAG,IAVyB,GAUzB,EAAlB,CAV2C,CAAA;;AAY3C,MAAIC,oBAAoB,GAZmB,IAY3C,CAZ2C,CAAA;;AAc3C,MAAIC,uBAAuB,GAdgB,IAc3C,CAd2C,CAAA;;AAgB3C,MAAIC,iBAAiB,GAhBsB,IAgB3C,CAhB2C,CAAA;AAkB3C;AACA;AACA;;AACA,MAAIC,qBAAqB,GAAzB,KAAA;AAEA,MAAIC,cAAc,GAAGC,WAAW,CAAA,UAAA,EAE9B9C,IAAI,CAAJA,OAAAA,CAF8B,QAAA,EAG9BA,IAAI,CAHN,QAAgC,CAAhC;AAKA,MAAI+C,aAAa,GAAjB,IAAA;;AAEA,MAAIF,cAAc,IAAlB,IAAA,EAA4B;AAC1B;AACA;AACA,QAAI;AAAA,MAAA,OAAA;AAAA,MAAA,KAAA;AAAkBvE,MAAAA;AAAlB,QAA4B0E,kBAAkB,CAAlD,UAAkD,CAAlD;AACAH,IAAAA,cAAc,GAAdA,OAAAA;AACAE,IAAAA,aAAa,GAAG;AAAE,OAAChJ,KAAK,CAAN,EAAA,GAAYuE;AAAd,KAAhByE;AACD;;AAED,MAAIE,WAAW,GACb,CAACJ,cAAc,CAAdA,IAAAA,CAAqBK,CAAD,IAAOA,CAAC,CAADA,KAAAA,CAA5B,MAACL,CAAD,IAA+C7C,IAAI,CAAJA,aAAAA,IADjD,IAAA;AAGA,MAAA,MAAA;AACA,MAAI3I,KAAK,GAAgB;AACvB8L,IAAAA,aAAa,EAAEnD,IAAI,CAAJA,OAAAA,CADQ,MAAA;AAEvB1I,IAAAA,QAAQ,EAAE0I,IAAI,CAAJA,OAAAA,CAFa,QAAA;AAGvBhF,IAAAA,OAAO,EAHgB,cAAA;AAAA,IAAA,WAAA;AAKvBoI,IAAAA,UAAU,EALa,eAAA;AAMvBC,IAAAA,qBAAqB,EANE,IAAA;AAOvBC,IAAAA,kBAAkB,EAPK,KAAA;AAQvBC,IAAAA,YAAY,EARW,MAAA;AASvBC,IAAAA,UAAU,EAAGxD,IAAI,CAAJA,aAAAA,IAAsBA,IAAI,CAAJA,aAAAA,CAAvB,UAACA,IATU,EAAA;AAUvByD,IAAAA,UAAU,EAAGzD,IAAI,CAAJA,aAAAA,IAAsBA,IAAI,CAAJA,aAAAA,CAAvB,UAACA,IAVU,IAAA;AAWvB0D,IAAAA,MAAM,EAAG1D,IAAI,CAAJA,aAAAA,IAAsBA,IAAI,CAAJA,aAAAA,CAAvB,MAACA,IAXc,aAAA;AAYvB2D,IAAAA,QAAQ,EAAE,IAAA,GAAA;AAZa,GAAzB,CA1C2C,CAAA;AA0D3C;;AACA,MAAIC,aAAa,GAAkBC,MAAa,CA3DL,GA2D3C,CA3D2C,CAAA;AA6D3C;;AACA,MAAIC,yBAAyB,GA9Dc,KA8D3C,CA9D2C,CAAA;;AAgE3C,MAhE2C,2BAgE3C,CAhE2C,CAAA;AAkE3C;;AACA,MAAIC,2BAA2B,GAnEY,KAmE3C,CAnE2C,CAAA;AAqE3C;AACA;AACA;;AACA,MAAIC,sBAAsB,GAxEiB,KAwE3C,CAxE2C,CAAA;AA0E3C;;AACA,MAAIC,uBAAuB,GA3EgB,EA2E3C,CA3E2C,CAAA;AA6E3C;;AACA,MAAIC,qBAAqB,GA9EkB,EA8E3C,CA9E2C,CAAA;;AAgF3C,MAAIC,gBAAgB,GAAG,IAhFoB,GAgFpB,EAAvB,CAhF2C,CAAA;;AAkF3C,MAAIC,kBAAkB,GAlFqB,CAkF3C,CAlF2C,CAAA;AAoF3C;AACA;;AACA,MAAIC,uBAAuB,GAAG,CAtFa,CAsF3C,CAtF2C,CAAA;;AAwF3C,MAAIC,cAAc,GAAG,IAxFsB,GAwFtB,EAArB,CAxF2C,CAAA;;AA0F3C,MAAIC,gBAAgB,GAAG,IA1FoB,GA0FpB,EAAvB,CA1F2C,CAAA;;AA4F3C,MAAIC,gBAAgB,GAAG,IA5FoB,GA4FpB,EAAvB,CA5F2C,CAAA;AA8F3C;AACA;AACA;;AACA,MAAIC,eAAe,GAAG,IAjGqB,GAiGrB,EAAtB,CAjG2C,CAAA;AAoG3C;AACA;;AACA,WAAA,UAAA,GAAmB;AACjB;AACA;AACAlC,IAAAA,eAAe,GAAG,IAAI,CAAJ,OAAA,CAAA,MAAA,CAChB,IAAA,IAAA;AAAA,UAAC;AAAErL,QAAAA,MAAM,EAAR,aAAA;AAAyBI,QAAAA;AAAzB,UAAD,IAAA;AAAA,aACEoN,eAAe,CAAA,aAAA,EADjB,QACiB,CADjB;AAJe,KAGC,CAAlBnC,CAHiB,CAAA;;AASjB,QAAI,CAAClL,KAAK,CAAV,WAAA,EAAwB;AACtBqN,MAAAA,eAAe,CAACb,MAAa,CAAd,GAAA,EAAoBxM,KAAK,CAAxCqN,QAAe,CAAfA;AACD;;AAED,WAAA,MAAA;AAnHyC,GAAA,CAAA;;;AAuH3C,WAAA,OAAA,GAAgB;AACd,QAAA,eAAA,EAAqB;AACnBnC,MAAAA,eAAe;AAChB;;AACDC,IAAAA,WAAW,CAAXA,KAAAA;AACAmC,IAAAA,2BAA2B,IAAIA,2BAA2B,CAA1DA,KAA+BA,EAA/BA;AACAtN,IAAAA,KAAK,CAALA,QAAAA,CAAAA,OAAAA,CAAuB,CAAA,CAAA,EAAA,GAAA,KAAYuN,aAAa,CAAhDvN,GAAgD,CAAhDA;AA7HyC,GAAA,CAAA;;;AAiI3C,WAAA,SAAA,CAAA,EAAA,EAAuC;AACrCmL,IAAAA,WAAW,CAAXA,GAAAA,CAAAA,EAAAA;AACA,WAAO,MAAMA,WAAW,CAAXA,MAAAA,CAAb,EAAaA,CAAb;AAnIyC,GAAA,CAAA;;;AAuI3C,WAAA,WAAA,CAAA,QAAA,EAAmD;AACjDnL,IAAAA,KAAK,GACAA,QAAAA,CAAAA,EAAAA,EADA,KACAA,EADLA,QACKA,CADLA;AAIAmL,IAAAA,WAAW,CAAXA,OAAAA,CAAqBzB,UAAD,IAAgBA,UAAU,CAA9CyB,KAA8C,CAA9CA;AA5IyC,GAAA,CAAA;AAgJ3C;AACA;AACA;AACA;;;AACA,WAAA,kBAAA,CAAA,QAAA,EAAA,QAAA,EAE4E;AAAA,QAAA,qBAAA,CAAA,CAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAIqC,cAAc,GAChBxN,KAAK,CAALA,UAAAA,IAAAA,IAAAA,IACAA,KAAK,CAALA,UAAAA,CAAAA,UAAAA,IADAA,IAAAA,IAEAA,KAAK,CAALA,UAAAA,CAAAA,KAAAA,KAFAA,SAAAA,IAGA,CAAA,CAAA,qBAAA,GAAA,KAAK,CAAL,UAAA,CAAA,UAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,MAA+CC,QAAQ,CAdiB,QAU1E,CAV0E,CAAA;;AAiB1E,QAAIwN,aAAa,GAAG,QAAQ,CAAR,UAAA,GAChB;AACEtB,MAAAA,UAAU,EAAEuB,eAAe,CACzB1N,KAAK,CADoB,UAAA,EAEzB2N,QAAQ,CAFiB,UAAA,EAGzBA,QAAQ,CAARA,OAAAA,IAHyB,EAAA;AAD7B,KADgB,GAApB,EAAA;AAUAC,IAAAA,WAAW,CAILJ,QAAAA,CAAAA,EAAAA,EAAAA,cAAc,GAAA,EAAA,GAAQ;AAAEpB,MAAAA,UAAU,EAAE;AAAd,KAAtBoB,EAJK,QAILA,EAJK,aAILA,EAJK;AAOT1B,MAAAA,aAAa,EAPJ,aAAA;AAAA,MAAA,QAAA;AASTF,MAAAA,WAAW,EATF,IAAA;AAUTG,MAAAA,UAAU,EAVD,eAAA;AAWTG,MAAAA,YAAY,EAXH,MAAA;AAYT;AACAF,MAAAA,qBAAqB,EAAEhM,KAAK,CAALA,UAAAA,CAAAA,QAAAA,GAAAA,KAAAA,GAEnB6N,sBAAsB,CAAA,QAAA,EAAWF,QAAQ,CAARA,OAAAA,IAAoB3N,KAAK,CAfrD,OAeiB,CAfjB;AAgBTiM,MAAAA,kBAAkB,EAAEQ;AAhBX,KAILe,CAJK,CAAXI;AAmBA,QAAA,2BAAA,EAAA,CAAA,KAEO,IAAIrB,aAAa,KAAKC,MAAa,CAAnC,GAAA,EAAA,CAAA,KAEA,IAAID,aAAa,KAAKC,MAAa,CAAnC,IAAA,EAA0C;AAC/C7D,MAAAA,IAAI,CAAJA,OAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EAA4B1I,QAAQ,CAApC0I,KAAAA;AADK,KAAA,MAEA,IAAI4D,aAAa,KAAKC,MAAa,CAAnC,OAAA,EAA6C;AAClD7D,MAAAA,IAAI,CAAJA,OAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EAA+B1I,QAAQ,CAAvC0I,KAAAA;AArDwE,KAAA,CAAA;;AAyD1E4D,IAAAA,aAAa,GAAGC,MAAa,CAA7BD,GAAAA;AACAE,IAAAA,yBAAyB,GAAzBA,KAAAA;AACAC,IAAAA,2BAA2B,GAA3BA,KAAAA;AACAC,IAAAA,sBAAsB,GAAtBA,KAAAA;AACAC,IAAAA,uBAAuB,GAAvBA,EAAAA;AACAC,IAAAA,qBAAqB,GAArBA,EAAAA;AApNyC,GAAA,CAAA;AAwN3C;;;AACA,iBAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAE8B;AAE5B,QAAI,OAAA,EAAA,KAAJ,QAAA,EAA4B;AAC1BlE,MAAAA,IAAI,CAAJA,OAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AACA;AACD;;AAED,QAAI;AAAA,MAAA,IAAA;AAAA,MAAA,UAAA;AAAoB1B,MAAAA;AAApB,QAA8B6G,wBAAwB,CAAA,EAAA,EAA1D,IAA0D,CAA1D;AAEA,QAAI7N,QAAQ,GAAGC,cAAc,CAACF,KAAK,CAAN,QAAA,EAAA,IAAA,EAAuB+N,IAAI,IAAIA,IAAI,CATpC,KASC,CAA7B,CAT4B,CAAA;AAY5B;AACA;AACA;AACA;;AACA9N,IAAAA,QAAQ,GAAG0I,IAAI,CAAJA,OAAAA,CAAAA,cAAAA,CAAX1I,QAAW0I,CAAX1I;AAEA,QAAI6L,aAAa,GACf,CAACiC,IAAI,IAAIA,IAAI,CAAb,OAAA,MAAA,IAAA,IAAmCC,UAAU,IAA7C,IAAA,GACIxB,MAAa,CADjB,OAAA,GAEIA,MAAa,CAHnB,IAAA;AAIA,QAAIP,kBAAkB,GACpB8B,IAAI,IAAI,wBAARA,IAAAA,GACIA,IAAI,CAAJA,kBAAAA,KADJA,IAAAA,GADF,SAAA;AAKA,WAAO,MAAMV,eAAe,CAAA,aAAA,EAAA,QAAA,EAA0B;AAAA,MAAA,UAAA;AAEpD;AACA;AACAY,MAAAA,YAAY,EAJwC,KAAA;AAAA,MAAA,kBAAA;AAMpDrN,MAAAA,OAAO,EAAEmN,IAAI,IAAIA,IAAI,CAACnN;AAN8B,KAA1B,CAA5B;AAtPyC,GAAA,CAAA;AAiQ3C;AACA;;;AACA,WAAA,UAAA,GAAmB;AACjBsN,IAAAA,oBAAoB;AACpBN,IAAAA,WAAW,CAAC;AAAE1B,MAAAA,YAAY,EAAE;AAAhB,KAAD,CAAX0B,CAFiB,CAAA;AAKjB;;AACA,QAAI5N,KAAK,CAALA,UAAAA,CAAAA,KAAAA,KAAJ,YAAA,EAA6C;AAC3C;AAPe,KAAA,CAAA;AAWjB;AACA;;;AACA,QAAIA,KAAK,CAALA,UAAAA,CAAAA,KAAAA,KAAJ,MAAA,EAAuC;AACrCqN,MAAAA,eAAe,CAACrN,KAAK,CAAN,aAAA,EAAsBA,KAAK,CAA3B,QAAA,EAAsC;AACnDmO,QAAAA,8BAA8B,EAAE;AADmB,OAAtC,CAAfd;AAGA;AAjBe,KAAA,CAAA;AAqBjB;AACA;;;AACAA,IAAAA,eAAe,CACbd,aAAa,IAAIvM,KAAK,CADT,aAAA,EAEbA,KAAK,CAALA,UAAAA,CAFa,QAAA,EAGb;AAAEoO,MAAAA,kBAAkB,EAAEpO,KAAK,CAAC+L;AAA5B,KAHa,CAAfsB;AA1RyC,GAAA,CAAA;AAkS3C;AACA;;;AACA,iBAAA,eAAA,CAAA,aAAA,EAAA,QAAA,EAAA,IAAA,EAUG;AAED;AACA;AACA;AACAC,IAAAA,2BAA2B,IAAIA,2BAA2B,CAA1DA,KAA+BA,EAA/BA;AACAA,IAAAA,2BAA2B,GAA3BA,IAAAA;AACAf,IAAAA,aAAa,GAAbA,aAAAA;AACAG,IAAAA,2BAA2B,GACzB,CAACqB,IAAI,IAAIA,IAAI,CAAb,8BAAA,MATD,IAQDrB,CARC,CAAA;AAYD;;AACA2B,IAAAA,kBAAkB,CAACrO,KAAK,CAAN,QAAA,EAAiBA,KAAK,CAAxCqO,OAAkB,CAAlBA;AACA5B,IAAAA,yBAAyB,GAAG,CAACsB,IAAI,IAAIA,IAAI,CAAb,kBAAA,MAA5BtB,IAAAA;AAEA,QAAI6B,iBAAiB,GAAGP,IAAI,IAAIA,IAAI,CAApC,kBAAA;AACA,QAAIpK,OAAO,GAAG8H,WAAW,CAAA,UAAA,EAAA,QAAA,EAAuB9C,IAAI,CAjBnD,QAiBwB,CAAzB,CAjBC,CAAA;;AAoBD,QAAI,CAAJ,OAAA,EAAc;AACZ,UAAI;AACFhF,QAAAA,OAAO,EADL,eAAA;AAAA,QAAA,KAAA;AAGFsD,QAAAA;AAHE,UAIA0E,kBAAkB,CALV,UAKU,CAJtB,CADY,CAAA;;AAOZ4C,MAAAA,qBAAqB;AACrBC,MAAAA,kBAAkB,CAAA,QAAA,EAAW;AAC3B7K,QAAAA,OAAO,EADoB,eAAA;AAE3BwI,QAAAA,UAAU,EAFiB,EAAA;AAG3BE,QAAAA,MAAM,EAAE;AACN,WAAC3J,KAAK,CAAN,EAAA,GAAYuE;AADN;AAHmB,OAAX,CAAlBuH;AAOA;AAnCD,KAAA,CAAA;;;AAuCD,QAAIC,gBAAgB,CAACzO,KAAK,CAAN,QAAA,EAApB,QAAoB,CAApB,EAAgD;AAC9CwO,MAAAA,kBAAkB,CAAA,QAAA,EAAW;AAAE7K,QAAAA;AAAF,OAAX,CAAlB6K;AACA;AAzCD,KAAA,CAAA;;;AA6CDlB,IAAAA,2BAA2B,GAAG,IAA9BA,eAA8B,EAA9BA;AACA,QAAIoB,OAAO,GAAGC,aAAa,CAAA,QAAA,EAEzBrB,2BAA2B,CAFF,MAAA,EAGzBS,IAAI,IAAIA,IAAI,CAHd,UAA2B,CAA3B;AAKA,QAAA,iBAAA;AACA,QAAA,YAAA;;AAEA,QAAIA,IAAI,IAAIA,IAAI,CAAhB,YAAA,EAA+B;AAC7B;AACA;AACA;AACA;AACAE,MAAAA,YAAY,GAAG;AACb,SAACW,mBAAmB,CAAnBA,OAAmB,CAAnBA,CAAAA,KAAAA,CAAD,EAAA,GAAyCb,IAAI,CAACE;AADjC,OAAfA;AALF,KAAA,MAQO,IAAIF,IAAI,IAAIA,IAAI,CAAhB,UAAA,EAA6B;AAClC;AACA,UAAIc,YAAY,GAAG,MAAMC,YAAY,CAAA,OAAA,EAAA,QAAA,EAGnCf,IAAI,CAH+B,UAAA,EAAA,OAAA,EAKnC;AAAEnN,QAAAA,OAAO,EAAEmN,IAAI,CAACnN;AAAhB,OALmC,CAArC;;AAQA,UAAIiO,YAAY,CAAhB,cAAA,EAAiC;AAC/B;AACD;;AAEDE,MAAAA,iBAAiB,GAAGF,YAAY,CAAhCE,iBAAAA;AACAd,MAAAA,YAAY,GAAGY,YAAY,CAA3BZ,kBAAAA;;AAEA,UAAIlC,UAAU,GAAA,QAAA,CAAA;AACZ/L,QAAAA,KAAK,EADO,SAAA;AAEZC,QAAAA;AAFY,OAAA,EAGT8N,IAAI,CAHT,UAAc,CAAd;;AAKAO,MAAAA,iBAAiB,GAAjBA,UAAAA;AApFD,KAAA,CAAA;;;AAwFD,QAAI;AAAA,MAAA,cAAA;AAAA,MAAA,UAAA;AAA8BjC,MAAAA;AAA9B,QAAyC,MAAM2C,aAAa,CAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,iBAAA,EAK9DjB,IAAI,IAAIA,IAAI,CALkD,UAAA,EAM9DA,IAAI,IAAIA,IAAI,CANkD,OAAA,EAAA,iBAAA,EAAhE,YAAgE,CAAhE;;AAWA,QAAA,cAAA,EAAoB;AAClB;AApGD,KAAA,CAAA;AAwGD;AACA;;;AACAT,IAAAA,2BAA2B,GAA3BA,IAAAA;AAEAkB,IAAAA,kBAAkB,CAAA,QAAA,EAAW;AAAA,MAAA,OAAA;AAAA,MAAA,UAAA;AAG3BnC,MAAAA;AAH2B,KAAX,CAAlBmC;AA1ZyC,GAAA,CAAA;AAka3C;;;AACA,iBAAA,YAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,OAAA,EAAA,IAAA,EAK8B;AAE5BN,IAAAA,oBAF4B,GAAA,CAAA;;AAK5B,QAAInC,UAAU,GAAA,QAAA,CAAA;AACZ/L,MAAAA,KAAK,EADO,YAAA;AAEZC,MAAAA;AAFY,KAAA,EAAd,UAAc,CAAd;;AAKA2N,IAAAA,WAAW,CAAC;AAAE7B,MAAAA;AAAF,KAAD,CAAX6B,CAV4B,CAAA;;AAa5B,QAAA,MAAA;AACA,QAAIqB,WAAW,GAAGC,cAAc,CAAA,OAAA,EAAhC,QAAgC,CAAhC;;AAEA,QAAI,CAACD,WAAW,CAAXA,KAAAA,CAAL,MAAA,EAA+B;AAC7BE,MAAAA,MAAM,GAAGC,yBAAyB,CAAlCD,QAAkC,CAAlCA;AADF,KAAA,MAEO;AACLA,MAAAA,MAAM,GAAG,MAAME,kBAAkB,CAAA,QAAA,EAAA,OAAA,EAAA,WAAA,EAAA,OAAA,EAK/BC,MAAM,CALRH,QAAiC,CAAjCA;;AAQA,UAAIT,OAAO,CAAPA,MAAAA,CAAJ,OAAA,EAA4B;AAC1B,eAAO;AAAEa,UAAAA,cAAc,EAAE;AAAlB,SAAP;AACD;AACF;;AAED,QAAIC,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AAC5B,UAAIC,kBAAkB,GAAA,QAAA,CAAA;AACpBzP,QAAAA,KAAK,EADe,SAAA;AAEpBC,QAAAA,QAAQ,EAAEC,cAAc,CAACF,KAAK,CAAN,QAAA,EAAiBmP,MAAM,CAAvB,QAAA;AAFJ,OAAA,EAAtB,UAAsB,CAAtB;;AAKA,YAAMO,uBAAuB,CAAA,MAAA,EAAA,kBAAA,EAG3B3B,IAAI,IAAIA,IAAI,CAHd,OAA6B,CAA7B;AAKA,aAAO;AAAEwB,QAAAA,cAAc,EAAE;AAAlB,OAAP;AACD;;AAED,QAAII,aAAa,CAAjB,MAAiB,CAAjB,EAA2B;AACzB;AACA;AACA,UAAIC,aAAa,GAAGhB,mBAAmB,CAAA,OAAA,EAAUK,WAAW,CAAXA,KAAAA,CAHxB,EAGc,CAAvC,CAHyB,CAAA;AAMzB;AACA;AACA;;AACA,UAAI,CAAClB,IAAI,IAAIA,IAAI,CAAb,OAAA,MAAJ,IAAA,EAAqC;AACnCxB,QAAAA,aAAa,GAAGC,MAAa,CAA7BD,IAAAA;AACD;;AAED,aAAO;AACLsD,QAAAA,kBAAkB,EAAE;AAAE,WAACD,aAAa,CAAbA,KAAAA,CAAD,EAAA,GAA0BT,MAAM,CAAClI;AAAnC;AADf,OAAP;AAGD;;AAED,QAAI6I,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AAC5B,YAAM,IAAA,KAAA,CAAN,qCAAM,CAAN;AACD;;AAED,WAAO;AACLf,MAAAA,iBAAiB,EAAE;AAAE,SAACE,WAAW,CAAXA,KAAAA,CAAD,EAAA,GAAwBE,MAAM,CAAClG;AAAjC;AADd,KAAP;AA5eyC,GAAA,CAAA;AAkf3C;;;AACA,iBAAA,aAAA,CAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,kBAAA,EAAA,UAAA,EAAA,OAAA,EAAA,iBAAA,EAAA,YAAA,EAQ0B;AAExB;AACA,QAAIqF,iBAAiB,GAArB,kBAAA;;AACA,QAAI,CAAJ,iBAAA,EAAwB;AACtB,UAAIvC,UAAU,GAAgC;AAC5C/L,QAAAA,KAAK,EADuC,SAAA;AAAA,QAAA,QAAA;AAG5C0K,QAAAA,UAAU,EAHkC,SAAA;AAI5CC,QAAAA,UAAU,EAJkC,SAAA;AAK5CC,QAAAA,WAAW,EALiC,SAAA;AAM5CC,QAAAA,QAAQ,EAAExH;AANkC,OAA9C;AAQAiL,MAAAA,iBAAiB,GAAjBA,UAAAA;AACD;;AAED,QAAI,CAAA,aAAA,EAAA,oBAAA,IAAwCyB,gBAAgB,CAAA,KAAA,EAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,uBAAA,EAAA,qBAAA,EAAA,iBAAA,EAAA,YAAA,EAhBpC,gBAgBoC,CAA5D,CAhBwB,CAAA;AA8BxB;AACA;;AACAxB,IAAAA,qBAAqB,CAClByB,OAAD,IACE,EAAErM,OAAO,IAAIA,OAAO,CAAPA,IAAAA,CAAckI,CAAD,IAAOA,CAAC,CAADA,KAAAA,CAAAA,EAAAA,KAAjC,OAAalI,CAAb,KACCsM,aAAa,IAAIA,aAAa,CAAbA,IAAAA,CAAoBpE,CAAD,IAAOA,CAAC,CAADA,KAAAA,CAAAA,EAAAA,KAnCxB,OAmCFoE,CAHD,CAArB1B,CAhCwB,CAAA;;AAuCxB,QAAI0B,aAAa,CAAbA,MAAAA,KAAAA,CAAAA,IAA8BC,oBAAoB,CAApBA,MAAAA,KAAlC,CAAA,EAAqE;AACnE1B,MAAAA,kBAAkB,CAAA,QAAA,EAAW;AAAA,QAAA,OAAA;AAE3BrC,QAAAA,UAAU,EAAEuB,eAAe,CAAC1N,KAAK,CAAN,UAAA,EAAA,EAAA,EAFA,OAEA,CAFA;AAG3B;AACAqM,QAAAA,MAAM,EAAE4B,YAAY,IAJO,IAAA;AAK3B7B,QAAAA,UAAU,EAAE2C,iBAAiB,IAAI;AALN,OAAX,CAAlBP;AAOA,aAAO;AAAEe,QAAAA,cAAc,EAAE;AAAlB,OAAP;AA/CsB,KAAA,CAAA;AAmDxB;AACA;AACA;;;AACA,QAAI,CAAJ,2BAAA,EAAkC;AAChCW,MAAAA,oBAAoB,CAApBA,OAAAA,CAA6B,KAAU,IAAA;AAAA,YAAT,CAAA,GAAA,IAAS,KAAA;AACrC,YAAIC,OAAO,GAAGnQ,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAd,GAAcA,CAAd;AACA,YAAIoQ,mBAAmB,GAA6B;AAClDpQ,UAAAA,KAAK,EAD6C,SAAA;AAElDiJ,UAAAA,IAAI,EAAEkH,OAAO,IAAIA,OAAO,CAF0B,IAAA;AAGlDzF,UAAAA,UAAU,EAHwC,SAAA;AAIlDC,UAAAA,UAAU,EAJwC,SAAA;AAKlDC,UAAAA,WAAW,EALuC,SAAA;AAMlDC,UAAAA,QAAQ,EAAExH;AANwC,SAApD;AAQArD,QAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,mBAAAA;AAVFkQ,OAAAA;AAYAtC,MAAAA,WAAW,CAAA,QAAA,CAAA;AACT7B,QAAAA,UAAU,EADD,iBAAA;AAETK,QAAAA,UAAU,EAAE2C,iBAAiB,IAAI/O,KAAK,CAA1B+O,UAAAA,IAAyC;AAF5C,OAAA,EAGL,oBAAoB,CAApB,MAAA,GAAA,CAAA,GACA;AAAEzC,QAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQtM,KAAK,CAAb,QAAA;AAAZ,OADA,GAHN4N,EAAW,CAAA,CAAXA;AAOD;;AAEDZ,IAAAA,uBAAuB,GAAG,EAA1BA,kBAAAA;AACAkD,IAAAA,oBAAoB,CAApBA,OAAAA,CAA6B,KAAA,IAAA;AAAA,UAAC,CAAD,GAAC,IAAD,KAAA;AAAA,aAC3BpD,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA,EAD2B,2BAC3BA,CAD2B;AAA7BoD,KAAAA;AAIA,QAAI;AAAA,MAAA,OAAA;AAAA,MAAA,aAAA;AAA0BG,MAAAA;AAA1B,QACF,MAAMC,8BAA8B,CAClCtQ,KAAK,CAD6B,OAAA,EAAA,OAAA,EAAA,aAAA,EAAA,oBAAA,EADtC,OACsC,CADtC;;AASA,QAAI0O,OAAO,CAAPA,MAAAA,CAAJ,OAAA,EAA4B;AAC1B,aAAO;AAAEa,QAAAA,cAAc,EAAE;AAAlB,OAAP;AA3FsB,KAAA,CAAA;AA+FxB;AACA;;;AACAW,IAAAA,oBAAoB,CAApBA,OAAAA,CAA6B,KAAA,IAAA;AAAA,UAAC,CAAD,GAAC,IAAD,KAAA;AAAA,aAAWpD,gBAAgB,CAAhBA,MAAAA,CAAX,GAAWA,CAAX;AAjGL,KAiGxBoD,EAjGwB,CAAA;;AAoGxB,QAAI7F,QAAQ,GAAGkG,YAAY,CAA3B,OAA2B,CAA3B;;AACA,QAAA,QAAA,EAAc;AACZ,UAAId,kBAAkB,GAAGe,iBAAiB,CAAA,KAAA,EAA1C,QAA0C,CAA1C;AACA,YAAMd,uBAAuB,CAAA,QAAA,EAAA,kBAAA,EAA7B,OAA6B,CAA7B;AACA,aAAO;AAAEH,QAAAA,cAAc,EAAE;AAAlB,OAAP;AAxGsB,KAAA,CAAA;;;AA4GxB,QAAI;AAAA,MAAA,UAAA;AAAclD,MAAAA;AAAd,QAAyBoE,iBAAiB,CAAA,KAAA,EAAA,OAAA,EAAA,aAAA,EAAA,aAAA,EAAA,YAAA,EAAA,oBAAA,EAAA,cAAA,EA5GtB,eA4GsB,CAA9C,CA5GwB,CAAA;;AAwHxBrD,IAAAA,eAAe,CAAfA,OAAAA,CAAwB,CAAA,YAAA,EAAA,OAAA,KAA0B;AAChDsD,MAAAA,YAAY,CAAZA,SAAAA,CAAwB5G,OAAD,IAAY;AACjC;AACA;AACA;AACA,YAAIA,OAAO,IAAI4G,YAAY,CAA3B,IAAA,EAAkC;AAChCtD,UAAAA,eAAe,CAAfA,MAAAA,CAAAA,OAAAA;AACD;AANHsD,OAAAA;AADFtD,KAAAA;AAWAuD,IAAAA,sBAAsB;AACtB,QAAIC,kBAAkB,GAAGC,oBAAoB,CAA7C,uBAA6C,CAA7C;AAEA,WAAA,QAAA,CAAA;AAAA,MAAA,UAAA;AAEExE,MAAAA;AAFF,KAAA,EAGM,kBAAkB,IAAI6D,oBAAoB,CAApBA,MAAAA,GAAtB,CAAA,GACA;AAAE5D,MAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQtM,KAAK,CAAb,QAAA;AAAZ,KADA,GAHN,EAAA,CAAA;AAOD;;AAED,WAAA,UAAA,CAAA,GAAA,EAA4C;AAC1C,WAAOA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,KAAP,YAAA;AA3oByC,GAAA,CAAA;;;AA+oB3C,WAAA,KAAA,CAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAI2B;AAEzB,QAAA,QAAA,EAAc;AACZ,YAAM,IAAA,KAAA,CACJ,8EAAA,8EAAA,GADF,6CAAM,CAAN;AAKD;;AAED,QAAI8M,gBAAgB,CAAhBA,GAAAA,CAAJ,GAAIA,CAAJ,EAA+BgE,YAAY,CAAZA,GAAY,CAAZA;AAE/B,QAAInN,OAAO,GAAG8H,WAAW,CAAA,UAAA,EAAA,IAAA,EAAmB9C,IAAI,CAAhD,QAAyB,CAAzB;;AACA,QAAI,CAAJ,OAAA,EAAc;AACZoI,MAAAA,eAAe,CAAA,GAAA,EAAA,OAAA,EAAe,IAAA,aAAA,CAAA,GAAA,EAAA,WAAA,EAA9BA,IAA8B,CAAf,CAAfA;AACA;AACD;;AAED,QAAI;AAAA,MAAA,IAAA;AAAQ/C,MAAAA;AAAR,QAAuBF,wBAAwB,CAAA,IAAA,EAAA,IAAA,EAAnD,IAAmD,CAAnD;AACA,QAAIjI,KAAK,GAAGqJ,cAAc,CAAA,OAAA,EAA1B,IAA0B,CAA1B;;AAEA,QAAA,UAAA,EAAgB;AACd8B,MAAAA,mBAAmB,CAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,OAAA,EAAnBA,UAAmB,CAAnBA;AACA;AAvBuB,KAAA,CAAA;AA2BzB;;;AACA7D,IAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA,EAA0B,CAAA,IAAA,EAAA,KAAA,EAA1BA,OAA0B,CAA1BA;AACA8D,IAAAA,mBAAmB,CAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAnBA,OAAmB,CAAnBA;AAhrByC,GAAA,CAAA;AAorB3C;;;AACA,iBAAA,mBAAA,CAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,cAAA,EAAA,UAAA,EAMwB;AAEtB/C,IAAAA,oBAAoB;AACpBf,IAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;;AAEA,QAAI,CAACtH,KAAK,CAALA,KAAAA,CAAL,MAAA,EAAyB;AACvB,UAAI;AAAEoB,QAAAA;AAAF,UAAYmI,yBAAyB,CAAzC,IAAyC,CAAzC;AACA2B,MAAAA,eAAe,CAAA,GAAA,EAAA,OAAA,EAAfA,KAAe,CAAfA;AACA;AARoB,KAAA,CAAA;;;AAYtB,QAAIG,eAAe,GAAGlR,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAtB,GAAsBA,CAAtB;;AACA,QAAImQ,OAAO,GAAA,QAAA,CAAA;AACTnQ,MAAAA,KAAK,EAAE;AADE,KAAA,EAAA,UAAA,EAAA;AAGTiJ,MAAAA,IAAI,EAAEiI,eAAe,IAAIA,eAAe,CAACjI;AAHhC,KAAA,CAAX;;AAKAjJ,IAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,OAAAA;AACA4N,IAAAA,WAAW,CAAC;AAAEtB,MAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQtM,KAAK,CAAb,QAAA;AAAZ,KAAD,CAAX4N,CAnBsB,CAAA;;AAsBtB,QAAIuD,eAAe,GAAG,IAAtB,eAAsB,EAAtB;AACA,QAAIC,YAAY,GAAGzC,aAAa,CAAA,IAAA,EAAOwC,eAAe,CAAtB,MAAA,EAAhC,UAAgC,CAAhC;AACArE,IAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA,EAAAA,eAAAA;AAEA,QAAIuE,YAAY,GAAG,MAAMhC,kBAAkB,CAAA,QAAA,EAAA,YAAA,EAAA,KAAA,EAAA,cAAA,EAKzCC,MAAM,CALR,QAA2C,CAA3C;;AAQA,QAAI8B,YAAY,CAAZA,MAAAA,CAAJ,OAAA,EAAiC;AAC/B;AACA;AACA,UAAItE,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA,MAAJ,eAAA,EAAmD;AACjDA,QAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACD;;AACD;AACD;;AAED,QAAI0C,gBAAgB,CAApB,YAAoB,CAApB,EAAoC;AAClC1C,MAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACAI,MAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA;;AACA,UAAIoE,cAAc,GAAA,QAAA,CAAA;AAChBtR,QAAAA,KAAK,EAAE;AADS,OAAA,EAAA,UAAA,EAAA;AAGhBiJ,QAAAA,IAAI,EAAE5F;AAHU,OAAA,CAAlB;;AAKArD,MAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,cAAAA;AACA4N,MAAAA,WAAW,CAAC;AAAEtB,QAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQtM,KAAK,CAAb,QAAA;AAAZ,OAAD,CAAX4N;;AAEA,UAAI6B,kBAAkB,GAAA,QAAA,CAAA;AACpBzP,QAAAA,KAAK,EADe,SAAA;AAEpBC,QAAAA,QAAQ,EAAEC,cAAc,CAACF,KAAK,CAAN,QAAA,EAAiBqR,YAAY,CAA7B,QAAA;AAFJ,OAAA,EAAtB,UAAsB,CAAtB;;AAKA,YAAM3B,uBAAuB,CAAA,YAAA,EAA7B,kBAA6B,CAA7B;AACA;AA5DoB,KAAA,CAAA;;;AAgEtB,QAAIC,aAAa,CAAjB,YAAiB,CAAjB,EAAiC;AAC/BoB,MAAAA,eAAe,CAAA,GAAA,EAAA,OAAA,EAAeM,YAAY,CAA1CN,KAAe,CAAfA;AACA;AACD;;AAED,QAAIjB,gBAAgB,CAApB,YAAoB,CAApB,EAAoC;AAClC/M,MAAAA,SAAS,CAAA,KAAA,EAATA,qCAAS,CAATA;AAtEoB,KAAA,CAAA;AA0EtB;;;AACA,QAAIpC,YAAY,GAAGX,KAAK,CAALA,UAAAA,CAAAA,QAAAA,IAA6BA,KAAK,CAArD,QAAA;AACA,QAAIuR,mBAAmB,GAAG5C,aAAa,CAAA,YAAA,EAErCwC,eAAe,CAFjB,MAAuC,CAAvC;AAIA,QAAIxN,OAAO,GACT3D,KAAK,CAALA,UAAAA,CAAAA,KAAAA,KAAAA,MAAAA,GACIyL,WAAW,CAAA,UAAA,EAAazL,KAAK,CAALA,UAAAA,CAAb,QAAA,EAAwC2I,IAAI,CAD3D3I,QACe,CADfA,GAEIA,KAAK,CAHX,OAAA;AAKA+C,IAAAA,SAAS,CAAA,OAAA,EAATA,8CAAS,CAATA;AAEA,QAAIyO,MAAM,GAAG,EAAb,kBAAA;AACAvE,IAAAA,cAAc,CAAdA,GAAAA,CAAAA,GAAAA,EAAAA,MAAAA;;AAEA,QAAIwE,WAAW,GAAA,QAAA,CAAA;AACbzR,MAAAA,KAAK,EADQ,SAAA;AAEbiJ,MAAAA,IAAI,EAAEoI,YAAY,CAACpI;AAFN,KAAA,EAAf,UAAe,CAAf;;AAKAjJ,IAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,WAAAA;AAEA,QAAI,CAAA,aAAA,EAAA,oBAAA,IAAwC+P,gBAAgB,CAAA,KAAA,EAAA,OAAA,EAAA,UAAA,EAAA,YAAA,EAAA,sBAAA,EAAA,uBAAA,EAAA,qBAAA,EAQ1D;AAAE,OAAClK,KAAK,CAALA,KAAAA,CAAD,EAAA,GAAkBwL,YAAY,CAACpI;AAAjC,KAR0D,EAAA,SAAA,EAAA;AAjGtC,IAAA,gBAiGsC,CAA5D,CAjGsB,CAAA;AA+GtB;AACA;;AACAiH,IAAAA,oBAAoB,CAApBA,MAAAA,CACU,KAAA,IAAA;AAAA,UAAC,CAAD,QAAC,IAAD,KAAA;AAAA,aAAgBwB,QAAQ,KAAxB,GAAA;AADVxB,KAAAA,EAAAA,OAAAA,CAEW,KAAe,IAAA;AAAA,UAAd,CAAA,QAAA,IAAc,KAAA;AACtB,UAAIgB,eAAe,GAAGlR,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAtB,QAAsBA,CAAtB;AACA,UAAIoQ,mBAAmB,GAA6B;AAClDpQ,QAAAA,KAAK,EAD6C,SAAA;AAElDiJ,QAAAA,IAAI,EAAEiI,eAAe,IAAIA,eAAe,CAFU,IAAA;AAGlDxG,QAAAA,UAAU,EAHwC,SAAA;AAIlDC,QAAAA,UAAU,EAJwC,SAAA;AAKlDC,QAAAA,WAAW,EALuC,SAAA;AAMlDC,QAAAA,QAAQ,EAAExH;AANwC,OAApD;AAQArD,MAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAAA,mBAAAA;AACA8M,MAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,QAAAA,EAAAA,eAAAA;AAbJoD,KAAAA;AAgBAtC,IAAAA,WAAW,CAAC;AAAEtB,MAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQtM,KAAK,CAAb,QAAA;AAAZ,KAAD,CAAX4N;AAEA,QAAI;AAAA,MAAA,OAAA;AAAA,MAAA,aAAA;AAA0ByC,MAAAA;AAA1B,QACF,MAAMC,8BAA8B,CAClCtQ,KAAK,CAD6B,OAAA,EAAA,OAAA,EAAA,aAAA,EAAA,oBAAA,EADtC,mBACsC,CADtC;;AASA,QAAImR,eAAe,CAAfA,MAAAA,CAAJ,OAAA,EAAoC;AAClC;AACD;;AAEDlE,IAAAA,cAAc,CAAdA,MAAAA,CAAAA,GAAAA;AACAH,IAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACAoD,IAAAA,oBAAoB,CAApBA,OAAAA,CAA6B,KAAA,IAAA;AAAA,UAAC,CAAD,QAAC,IAAD,KAAA;AAAA,aAC3BpD,gBAAgB,CAAhBA,MAAAA,CAD2B,QAC3BA,CAD2B;AAA7BoD,KAAAA;AAIA,QAAI7F,QAAQ,GAAGkG,YAAY,CAA3B,OAA2B,CAA3B;;AACA,QAAA,QAAA,EAAc;AACZ,UAAId,kBAAkB,GAAGe,iBAAiB,CAAA,KAAA,EAA1C,QAA0C,CAA1C;AACA,YAAMd,uBAAuB,CAAA,QAAA,EAA7B,kBAA6B,CAA7B;AACA;AA1JoB,KAAA,CAAA;;;AA8JtB,QAAI;AAAA,MAAA,UAAA;AAAcrD,MAAAA;AAAd,QAAyBoE,iBAAiB,CAAA,KAAA,EAE5CzQ,KAAK,CAFuC,OAAA,EAAA,aAAA,EAAA,aAAA,EAAA,SAAA,EAAA,oBAAA,EAAA,cAAA,EAA9C,eAA8C,CAA9C;AAWA,QAAI2R,WAAW,GAA0B;AACvC3R,MAAAA,KAAK,EADkC,MAAA;AAEvCiJ,MAAAA,IAAI,EAAEoI,YAAY,CAFqB,IAAA;AAGvC3G,MAAAA,UAAU,EAH6B,SAAA;AAIvCC,MAAAA,UAAU,EAJ6B,SAAA;AAKvCC,MAAAA,WAAW,EAL4B,SAAA;AAMvCC,MAAAA,QAAQ,EAAExH;AAN6B,KAAzC;AAQArD,IAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,WAAAA;AAEA,QAAI4Q,kBAAkB,GAAGC,oBAAoB,CAnLvB,MAmLuB,CAA7C,CAnLsB,CAAA;AAsLtB;AACA;;AACA,QACE7Q,KAAK,CAALA,UAAAA,CAAAA,KAAAA,KAAAA,SAAAA,IACAwR,MAAM,GAFR,uBAAA,EAGE;AACAzO,MAAAA,SAAS,CAAA,aAAA,EAATA,yBAAS,CAATA;AACAuK,MAAAA,2BAA2B,IAAIA,2BAA2B,CAA1DA,KAA+BA,EAA/BA;AAEAkB,MAAAA,kBAAkB,CAACxO,KAAK,CAALA,UAAAA,CAAD,QAAA,EAA4B;AAAA,QAAA,OAAA;AAAA,QAAA,UAAA;AAAA,QAAA,MAAA;AAI5CsM,QAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQtM,KAAK,CAAb,QAAA;AAJkC,OAA5B,CAAlBwO;AAPF,KAAA,MAaO;AACL;AACA;AACA;AACAZ,MAAAA,WAAW,CAAA,QAAA,CAAA;AAAA,QAAA,MAAA;AAETzB,QAAAA,UAAU,EAAEuB,eAAe,CAAC1N,KAAK,CAAN,UAAA,EAAA,UAAA,EAAA,OAAA;AAFlB,OAAA,EAGL4Q,kBAAkB,GAAG;AAAEtE,QAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQtM,KAAK,CAAb,QAAA;AAAZ,OAAH,GAHxB4N,EAAW,CAAA,CAAXA;AAKAjB,MAAAA,sBAAsB,GAAtBA,KAAAA;AACD;AA14BwC,GAAA,CAAA;;;AA84B3C,iBAAA,mBAAA,CAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,OAAA,EAKmC;AAEjC,QAAIuE,eAAe,GAAGlR,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAFW,GAEXA,CAAtB,CAFiC,CAAA;;AAIjC,QAAIsR,cAAc,GAA6B;AAC7CtR,MAAAA,KAAK,EADwC,SAAA;AAE7C0K,MAAAA,UAAU,EAFmC,SAAA;AAG7CC,MAAAA,UAAU,EAHmC,SAAA;AAI7CC,MAAAA,WAAW,EAJkC,SAAA;AAK7CC,MAAAA,QAAQ,EALqC,SAAA;AAM7C5B,MAAAA,IAAI,EAAEiI,eAAe,IAAIA,eAAe,CAACjI;AANI,KAA/C;AAQAjJ,IAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,cAAAA;AACA4N,IAAAA,WAAW,CAAC;AAAEtB,MAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQtM,KAAK,CAAb,QAAA;AAAZ,KAAD,CAAX4N,CAbiC,CAAA;;AAgBjC,QAAIuD,eAAe,GAAG,IAAtB,eAAsB,EAAtB;AACA,QAAIC,YAAY,GAAGzC,aAAa,CAAA,IAAA,EAAOwC,eAAe,CAAtD,MAAgC,CAAhC;AACArE,IAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA,EAAAA,eAAAA;AACA,QAAIqC,MAAM,GAAe,MAAME,kBAAkB,CAAA,QAAA,EAAA,YAAA,EAAA,KAAA,EAAA,OAAA,EAK/CC,MAAM,CAxByB,QAmBgB,CAAjD,CAnBiC,CAAA;AA4BjC;AACA;AACA;;AACA,QAAIQ,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AAC5BX,MAAAA,MAAM,GACJ,CAAC,MAAMyC,mBAAmB,CAAA,MAAA,EAASR,YAAY,CAArB,MAAA,EAA1B,IAA0B,CAA1B,KADFjC,MAAAA;AAhC+B,KAAA,CAAA;AAsCjC;;;AACA,QAAIrC,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA,MAAJ,eAAA,EAAmD;AACjDA,MAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACD;;AAED,QAAIsE,YAAY,CAAZA,MAAAA,CAAJ,OAAA,EAAiC;AAC/B;AA5C+B,KAAA,CAAA;;;AAgDjC,QAAI5B,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AAC5B,UAAIC,kBAAkB,GAAGe,iBAAiB,CAAA,KAAA,EAA1C,MAA0C,CAA1C;AACA,YAAMd,uBAAuB,CAAA,MAAA,EAA7B,kBAA6B,CAA7B;AACA;AAnD+B,KAAA,CAAA;;;AAuDjC,QAAIC,aAAa,CAAjB,MAAiB,CAAjB,EAA2B;AACzB,UAAIC,aAAa,GAAGhB,mBAAmB,CAAC5O,KAAK,CAAN,OAAA,EAAvC,OAAuC,CAAvC;AACAA,MAAAA,KAAK,CAALA,QAAAA,CAAAA,MAAAA,CAFyB,GAEzBA,EAFyB,CAAA;AAIzB;AACA;;AACA4N,MAAAA,WAAW,CAAC;AACVtB,QAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQtM,KAAK,CADb,QACA,CADA;AAEVqM,QAAAA,MAAM,EAAE;AACN,WAACuD,aAAa,CAAbA,KAAAA,CAAD,EAAA,GAA0BT,MAAM,CAAClI;AAD3B;AAFE,OAAD,CAAX2G;AAMA;AACD;;AAED7K,IAAAA,SAAS,CAAC,CAAC+M,gBAAgB,CAAlB,MAAkB,CAAlB,EAtEwB,iCAsExB,CAAT/M,CAtEiC,CAAA;;AAyEjC,QAAI4O,WAAW,GAA0B;AACvC3R,MAAAA,KAAK,EADkC,MAAA;AAEvCiJ,MAAAA,IAAI,EAAEkG,MAAM,CAF2B,IAAA;AAGvCzE,MAAAA,UAAU,EAH6B,SAAA;AAIvCC,MAAAA,UAAU,EAJ6B,SAAA;AAKvCC,MAAAA,WAAW,EAL4B,SAAA;AAMvCC,MAAAA,QAAQ,EAAExH;AAN6B,KAAzC;AAQArD,IAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,WAAAA;AACA4N,IAAAA,WAAW,CAAC;AAAEtB,MAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQtM,KAAK,CAAb,QAAA;AAAZ,KAAD,CAAX4N;AACD;AAED;;;;;;;;;;;;;;;;;;AAkBG;;;AACH,iBAAA,uBAAA,CAAA,QAAA,EAAA,UAAA,EAAA,OAAA,EAGmB;AAEjB,QAAIvD,QAAQ,CAAZ,UAAA,EAAyB;AACvBsC,MAAAA,sBAAsB,GAAtBA,IAAAA;AACD;;AACD5J,IAAAA,SAAS,CACPgJ,UAAU,CADH,QAAA,EALQ,gDAKR,CAAThJ,CALiB,CAAA;AAUjB;;AACAuK,IAAAA,2BAA2B,GAA3BA,IAAAA;AAEA,QAAIuE,qBAAqB,GACvBjR,OAAO,KAAPA,IAAAA,GAAmB4L,MAAa,CAAhC5L,OAAAA,GAA2C4L,MAAa,CAD1D,IAAA;AAGA,UAAMa,eAAe,CAAA,qBAAA,EAAwBtB,UAAU,CAAlC,QAAA,EAA6C;AAChEqC,MAAAA,kBAAkB,EAAErC;AAD4C,KAA7C,CAArB;AAGD;;AAED,iBAAA,8BAAA,CAAA,cAAA,EAAA,OAAA,EAAA,aAAA,EAAA,cAAA,EAAA,OAAA,EAKkB;AAEhB;AACA;AACA;AACA,QAAI+F,OAAO,GAAG,MAAM,OAAO,CAAP,GAAA,CAAY,CAC9B,GAAG7B,aAAa,CAAbA,GAAAA,CAAmBpK,KAAD,IACnBwJ,kBAAkB,CAAA,QAAA,EAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAoCC,MAAM,CAFhC,QAEV,CADjBW,CAD2B,EAI9B,GAAG,cAAc,CAAd,GAAA,CAAmB,KAAA,IAAA;AAAA,UAAC,GAAA,IAAA,EAAA,KAAA,EAAD,YAAC,IAAD,KAAA;AAAA,aACpBZ,kBAAkB,CAAA,QAAA,EAEhBV,aAAa,CAAA,IAAA,EAAOD,OAAO,CAFX,MAEH,CAFG,EAAA,KAAA,EAAA,YAAA,EAKhBY,MAAM,CANY,QACF,CADE;AAJxB,KAIK,CAJ2B,CAAZ,CAApB;AAcA,QAAIyC,aAAa,GAAGD,OAAO,CAAPA,KAAAA,CAAAA,CAAAA,EAAiB7B,aAAa,CAAlD,MAAoB6B,CAApB;AACA,QAAIzB,cAAc,GAAGyB,OAAO,CAAPA,KAAAA,CAAc7B,aAAa,CAAhD,MAAqB6B,CAArB;AAEA,UAAMvI,OAAO,CAAPA,GAAAA,CAAY,CAChByI,sBAAsB,CAAA,cAAA,EAAA,aAAA,EAAA,aAAA,EAIpBtD,OAAO,CAJa,MAAA,EAAA,KAAA,EAMpB1O,KAAK,CAPS,UACM,CADN,EAShBgS,sBAAsB,CAAA,cAAA,EAEpB,cAAc,CAAd,GAAA,CAAmB,KAAA,IAAA;AAAA,UAAC,IAAD,KAAC,IAAD,KAAA;AAAA,aAAA,KAAA;AAFC,KAEpB,CAFoB,EAAA,cAAA,EAIpBtD,OAAO,CAJa,MAAA,EATxB,IASwB,CATN,CAAZnF,CAAN;AAkBA,WAAO;AAAA,MAAA,OAAA;AAAA,MAAA,aAAA;AAA0B8G,MAAAA;AAA1B,KAAP;AACD;;AAED,WAAA,oBAAA,GAA6B;AAC3B;AACA1D,IAAAA,sBAAsB,GAFK,IAE3BA,CAF2B,CAAA;AAK3B;;AACAC,IAAAA,uBAAuB,CAAvBA,IAAAA,CAA6B,GAAG2B,qBANL,EAM3B3B,EAN2B,CAAA;;AAS3BO,IAAAA,gBAAgB,CAAhBA,OAAAA,CAAyB,CAAA,CAAA,EAAA,GAAA,KAAW;AAClC,UAAIL,gBAAgB,CAAhBA,GAAAA,CAAJ,GAAIA,CAAJ,EAA+B;AAC7BD,QAAAA,qBAAqB,CAArBA,IAAAA,CAAAA,GAAAA;AACAiE,QAAAA,YAAY,CAAZA,GAAY,CAAZA;AACD;AAJH3D,KAAAA;AAMD;;AAED,WAAA,eAAA,CAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAiE;AAC/D,QAAIyC,aAAa,GAAGhB,mBAAmB,CAAC5O,KAAK,CAAN,OAAA,EAAvC,OAAuC,CAAvC;AACAuN,IAAAA,aAAa,CAAbA,GAAa,CAAbA;AACAK,IAAAA,WAAW,CAAC;AACVvB,MAAAA,MAAM,EAAE;AACN,SAACuD,aAAa,CAAbA,KAAAA,CAAD,EAAA,GAA0B3I;AADpB,OADE;AAIVqF,MAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQtM,KAAK,CAAb,QAAA;AAJA,KAAD,CAAX4N;AAMD;;AAED,WAAA,aAAA,CAAA,GAAA,EAAkC;AAChC,QAAId,gBAAgB,CAAhBA,GAAAA,CAAJ,GAAIA,CAAJ,EAA+BgE,YAAY,CAAZA,GAAY,CAAZA;AAC/B3D,IAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACAF,IAAAA,cAAc,CAAdA,MAAAA,CAAAA,GAAAA;AACAC,IAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACAlN,IAAAA,KAAK,CAALA,QAAAA,CAAAA,MAAAA,CAAAA,GAAAA;AACD;;AAED,WAAA,YAAA,CAAA,GAAA,EAAiC;AAC/B,QAAIiS,UAAU,GAAGnF,gBAAgB,CAAhBA,GAAAA,CAAjB,GAAiBA,CAAjB;AACA/J,IAAAA,SAAS,CAAA,UAAA,EAA2CnB,gCAApDmB,GAAS,CAATA;AACAkP,IAAAA,UAAU,CAAVA,KAAAA;AACAnF,IAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACD;;AAED,WAAA,gBAAA,CAAA,IAAA,EAAwC;AACtC,SAAK,IAAL,GAAA,IAAA,IAAA,EAAsB;AACpB,UAAIqD,OAAO,GAAG+B,UAAU,CAAxB,GAAwB,CAAxB;AACA,UAAIP,WAAW,GAA0B;AACvC3R,QAAAA,KAAK,EADkC,MAAA;AAEvCiJ,QAAAA,IAAI,EAAEkH,OAAO,CAF0B,IAAA;AAGvCzF,QAAAA,UAAU,EAH6B,SAAA;AAIvCC,QAAAA,UAAU,EAJ6B,SAAA;AAKvCC,QAAAA,WAAW,EAL4B,SAAA;AAMvCC,QAAAA,QAAQ,EAAExH;AAN6B,OAAzC;AAQArD,MAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,WAAAA;AACD;AACF;;AAED,WAAA,sBAAA,GAA+B;AAC7B,QAAImS,QAAQ,GAAZ,EAAA;;AACA,SAAK,IAAL,GAAA,IAAA,gBAAA,EAAkC;AAChC,UAAIhC,OAAO,GAAGnQ,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAd,GAAcA,CAAd;AACA+C,MAAAA,SAAS,CAAA,OAAA,EAA+BnB,uBAAxCmB,GAAS,CAATA;;AACA,UAAIoN,OAAO,CAAPA,KAAAA,KAAJ,SAAA,EAAiC;AAC/BjD,QAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACAiF,QAAAA,QAAQ,CAARA,IAAAA,CAAAA,GAAAA;AACD;AACF;;AACDC,IAAAA,gBAAgB,CAAhBA,QAAgB,CAAhBA;AACD;;AAED,WAAA,oBAAA,CAAA,QAAA,EAA8C;AAC5C,QAAIC,UAAU,GAAd,EAAA;;AACA,SAAK,IAAI,CAAA,GAAA,EAAT,EAAS,CAAT,IAAA,cAAA,EAAsC;AACpC,UAAIvP,EAAE,GAAN,QAAA,EAAmB;AACjB,YAAIqN,OAAO,GAAGnQ,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAd,GAAcA,CAAd;AACA+C,QAAAA,SAAS,CAAA,OAAA,EAA+BnB,uBAAxCmB,GAAS,CAATA;;AACA,YAAIoN,OAAO,CAAPA,KAAAA,KAAJ,SAAA,EAAiC;AAC/BW,UAAAA,YAAY,CAAZA,GAAY,CAAZA;AACA7D,UAAAA,cAAc,CAAdA,MAAAA,CAAAA,GAAAA;AACAoF,UAAAA,UAAU,CAAVA,IAAAA,CAAAA,GAAAA;AACD;AACF;AACF;;AACDD,IAAAA,gBAAgB,CAAhBA,UAAgB,CAAhBA;AACA,WAAOC,UAAU,CAAVA,MAAAA,GAAP,CAAA;AACD;;AAED,WAAA,qBAAA,CAAA,SAAA,EAC0C;AAExC,QAAIC,iBAAiB,GAArB,EAAA;AACAlF,IAAAA,eAAe,CAAfA,OAAAA,CAAwB,CAAA,GAAA,EAAA,OAAA,KAAiB;AACvC,UAAI,CAAA,SAAA,IAAcmF,SAAS,CAA3B,OAA2B,CAA3B,EAAsC;AACpC;AACA;AACA;AACAC,QAAAA,GAAG,CAAHA,MAAAA;AACAF,QAAAA,iBAAiB,CAAjBA,IAAAA,CAAAA,OAAAA;AACAlF,QAAAA,eAAe,CAAfA,MAAAA,CAAAA,OAAAA;AACD;AARHA,KAAAA;AAUA,WAAA,iBAAA;AAzqCyC,GAAA,CAAA;AA6qC3C;;;AACA,WAAA,uBAAA,CAAA,SAAA,EAAA,WAAA,EAAA,MAAA,EAG0C;AAExChC,IAAAA,oBAAoB,GAApBA,SAAAA;AACAE,IAAAA,iBAAiB,GAAjBA,WAAAA;;AACAD,IAAAA,uBAAuB,GAAGoH,MAAM,KAAMxS,QAAD,IAAcA,QAAQ,CAJnB,GAIR,CAAhCoL,CAJwC,CAAA;AAOxC;AACA;;;AACA,QAAI,CAAA,qBAAA,IAA0BrL,KAAK,CAALA,UAAAA,KAA9B,eAAA,EAAoE;AAClEuL,MAAAA,qBAAqB,GAArBA,IAAAA;AACA,UAAImH,CAAC,GAAG7E,sBAAsB,CAAC7N,KAAK,CAAN,QAAA,EAAiBA,KAAK,CAApD,OAA8B,CAA9B;;AACA,UAAI0S,CAAC,IAAL,IAAA,EAAe;AACb9E,QAAAA,WAAW,CAAC;AAAE5B,UAAAA,qBAAqB,EAAE0G;AAAzB,SAAD,CAAX9E;AACD;AACF;;AAED,WAAO,MAAK;AACVxC,MAAAA,oBAAoB,GAApBA,IAAAA;AACAE,MAAAA,iBAAiB,GAAjBA,IAAAA;AACAD,MAAAA,uBAAuB,GAAvBA,IAAAA;AAHF,KAAA;AAKD;;AAED,WAAA,kBAAA,CAAA,QAAA,EAAA,OAAA,EAEmC;AAEjC,QAAID,oBAAoB,IAApBA,uBAAAA,IAAJ,iBAAA,EAA0E;AACxE,UAAIuH,WAAW,GAAGhP,OAAO,CAAPA,GAAAA,CAAakI,CAAD,IAC5B+G,qBAAqB,CAAA,CAAA,EAAI5S,KAAK,CADhC,UACuB,CADL2D,CAAlB;AAGA,UAAI/B,GAAG,GAAGyJ,uBAAuB,CAAA,QAAA,EAAvBA,WAAuB,CAAvBA,IAAkDpL,QAAQ,CAApE,GAAA;AACAmL,MAAAA,oBAAoB,CAApBA,GAAoB,CAApBA,GAA4BE,iBAA5BF,EAAAA;AACD;AACF;;AAED,WAAA,sBAAA,CAAA,QAAA,EAAA,OAAA,EAEmC;AAEjC,QAAIA,oBAAoB,IAApBA,uBAAAA,IAAJ,iBAAA,EAA0E;AACxE,UAAIuH,WAAW,GAAGhP,OAAO,CAAPA,GAAAA,CAAakI,CAAD,IAC5B+G,qBAAqB,CAAA,CAAA,EAAI5S,KAAK,CADhC,UACuB,CADL2D,CAAlB;AAGA,UAAI/B,GAAG,GAAGyJ,uBAAuB,CAAA,QAAA,EAAvBA,WAAuB,CAAvBA,IAAkDpL,QAAQ,CAApE,GAAA;AACA,UAAIyS,CAAC,GAAGtH,oBAAoB,CAA5B,GAA4B,CAA5B;;AACA,UAAI,OAAA,CAAA,KAAJ,QAAA,EAA2B;AACzB,eAAA,CAAA;AACD;AACF;;AACD,WAAA,IAAA;AACD;;AAEDkE,EAAAA,MAAM,GAAG;AACP,QAAA,QAAA,GAAY;AACV,aAAO3G,IAAI,CAAX,QAAA;AAFK,KAAA;;AAIP,QAAA,KAAA,GAAS;AACP,aAAA,KAAA;AALK,KAAA;;AAOP,QAAA,MAAA,GAAU;AACR,aAAA,UAAA;AARK,KAAA;;AAAA,IAAA,UAAA;AAAA,IAAA,SAAA;AAAA,IAAA,uBAAA;AAAA,IAAA,QAAA;AAAA,IAAA,KAAA;AAAA,IAAA,UAAA;AAgBP;AACA;AACApI,IAAAA,UAAU,EAAGuB,EAAD,IAAY6G,IAAI,CAAJA,OAAAA,CAAAA,UAAAA,CAlBjB,EAkBiBA,CAlBjB;AAAA,IAAA,UAAA;AAAA,IAAA,aAAA;AAAA,IAAA,OAAA;AAsBPkK,IAAAA,yBAAyB,EAtBlB,gBAAA;AAuBPC,IAAAA,wBAAwB,EAAE1F;AAvBnB,GAATkC;AA0BA,SAAA,MAAA;AACD,C,CAAA;AAGD;AACA;AACA;;;AAEA,MAAMyD,kBAAkB,GAAG,IAAA,GAAA,CAAQ,CAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAnC,QAAmC,CAAR,CAA3B;AACA,MAAMC,mBAAmB,GAAG,IAAA,GAAA,CAAQ,CAAA,KAAA,EAAA,MAAA,EAAgB,GAApD,kBAAoC,CAAR,CAA5B;;AAEM,SAAA,4BAAA,CAAA,MAAA,EACyB;AAE7BjQ,EAAAA,SAAS,CACPiB,MAAM,CAANA,MAAAA,GADO,CAAA,EAATjB,2EAAS,CAATA;AAKA,MAAIkI,UAAU,GAAG7H,yBAAyB,CAA1C,MAA0C,CAA1C;AAEA;;;;;;;;;;;;;;;;;;AAkBG;;AACH,iBAAA,KAAA,CAAA,OAAA,EACkB;AAEhB,QAAI5B,GAAG,GAAG,IAAA,GAAA,CAAQkN,OAAO,CAAzB,GAAU,CAAV;AACA,QAAIzO,QAAQ,GAAGC,cAAc,CAAA,EAAA,EAAKM,UAAU,CAAf,GAAe,CAAf,EAAA,IAAA,EAA7B,SAA6B,CAA7B;AACA,QAAImD,OAAO,GAAG8H,WAAW,CAAA,UAAA,EAAzB,QAAyB,CAAzB;;AAEA,QAAI,CAACuH,mBAAmB,CAAnBA,GAAAA,CAAwBtE,OAAO,CAApC,MAAKsE,CAAL,EAA8C;AAC5C,UAAI;AACFrP,QAAAA,OAAO,EADL,uBAAA;AAAA,QAAA,KAAA;AAGFsD,QAAAA;AAHE,UAIAgM,0BAA0B,CAJ9B,UAI8B,CAJ9B;AAKA,aAAO;AAAA,QAAA,QAAA;AAELtP,QAAAA,OAAO,EAFF,uBAAA;AAGLwI,QAAAA,UAAU,EAHL,EAAA;AAILC,QAAAA,UAAU,EAJL,IAAA;AAKLC,QAAAA,MAAM,EAAE;AACN,WAAC3J,KAAK,CAAN,EAAA,GAAYuE;AADN,SALH;AAQLiM,QAAAA,UAAU,EAAEjM,KAAK,CARZ,MAAA;AASLkM,QAAAA,aAAa,EATR,EAAA;AAULC,QAAAA,aAAa,EAAE;AAVV,OAAP;AANF,KAAA,MAkBO,IAAI,CAAJ,OAAA,EAAc;AACnB,UAAI;AACFzP,QAAAA,OAAO,EADL,eAAA;AAAA,QAAA,KAAA;AAGFsD,QAAAA;AAHE,UAIA0E,kBAAkB,CAJtB,UAIsB,CAJtB;AAKA,aAAO;AAAA,QAAA,QAAA;AAELhI,QAAAA,OAAO,EAFF,eAAA;AAGLwI,QAAAA,UAAU,EAHL,EAAA;AAILC,QAAAA,UAAU,EAJL,IAAA;AAKLC,QAAAA,MAAM,EAAE;AACN,WAAC3J,KAAK,CAAN,EAAA,GAAYuE;AADN,SALH;AAQLiM,QAAAA,UAAU,EAAEjM,KAAK,CARZ,MAAA;AASLkM,QAAAA,aAAa,EATR,EAAA;AAULC,QAAAA,aAAa,EAAE;AAVV,OAAP;AAYD;;AAED,QAAIjE,MAAM,GAAG,MAAMkE,SAAS,CAAA,OAAA,EAAA,QAAA,EAA5B,OAA4B,CAA5B;;AACA,QAAIlE,MAAM,YAAV,QAAA,EAAgC;AAC9B,aAAA,MAAA;AA9Cc,KAAA,CAAA;AAkDhB;AACA;;;AACA,WAAA,QAAA,CAAA;AAASlP,MAAAA;AAAT,KAAA,EAAA,MAAA,CAAA;AACD;AAED;;;;;;;;;;;;;;;;AAgBG;;;AACH,iBAAA,UAAA,CAAA,OAAA,EAAA,OAAA,EAA4D;AAC1D,QAAIuB,GAAG,GAAG,IAAA,GAAA,CAAQkN,OAAO,CAAzB,GAAU,CAAV;AACA,QAAIzO,QAAQ,GAAGC,cAAc,CAAA,EAAA,EAAKM,UAAU,CAAf,GAAe,CAAf,EAAA,IAAA,EAA7B,SAA6B,CAA7B;AACA,QAAImD,OAAO,GAAG8H,WAAW,CAAA,UAAA,EAAzB,QAAyB,CAAzB;;AAEA,QAAI,CAACuH,mBAAmB,CAAnBA,GAAAA,CAAwBtE,OAAO,CAApC,MAAKsE,CAAL,EAA8C;AAC5C,YAAMM,yBAAyB,CAAA,IAAA,EAAO;AACpCzK,QAAAA,MAAM,EAD8B,GAAA;AAEpC0B,QAAAA,UAAU,EAAE;AAFwB,OAAP,CAA/B;AADF,KAAA,MAKO,IAAI,CAAJ,OAAA,EAAc;AACnB,YAAM+I,yBAAyB,CAAA,IAAA,EAAO;AACpCzK,QAAAA,MAAM,EAD8B,GAAA;AAEpC0B,QAAAA,UAAU,EAAE;AAFwB,OAAP,CAA/B;AAID;;AAED,QAAI1E,KAAK,GAAGmK,OAAO,GACfrM,OAAO,CAAPA,IAAAA,CAAckI,CAAD,IAAOA,CAAC,CAADA,KAAAA,CAAAA,EAAAA,KADL,OACflI,CADe,GAEfuL,cAAc,CAAA,OAAA,EAFlB,QAEkB,CAFlB;;AAIA,QAAI,CAAJ,KAAA,EAAY;AACV,YAAMoE,yBAAyB,CAAA,IAAA,EAAO;AACpCzK,QAAAA,MAAM,EAD8B,GAAA;AAEpC0B,QAAAA,UAAU,EAAE;AAFwB,OAAP,CAA/B;AAID;;AAED,QAAI4E,MAAM,GAAG,MAAMkE,SAAS,CAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAA5B,KAA4B,CAA5B;;AACA,QAAIlE,MAAM,YAAV,QAAA,EAAgC;AAC9B,aAAA,MAAA;AACD;;AAED,QAAIlI,KAAK,GAAGkI,MAAM,CAANA,MAAAA,GAAgBpJ,MAAM,CAANA,MAAAA,CAAcoJ,MAAM,CAApBpJ,MAAAA,EAAhBoJ,CAAgBpJ,CAAhBoJ,GAAZ,SAAA;;AACA,QAAIlI,KAAK,KAAT,SAAA,EAAyB;AACvB;AACA;AACA;AACA;AACA,YAAA,KAAA;AAvCwD,KAAA,CAAA;;;AA2C1D,QAAIsM,SAAS,GAAG,CAACpE,MAAM,CAAP,UAAA,EAAoBA,MAAM,CAA1B,UAAA,EAAA,IAAA,CAA6CqE,CAAD,IAA5D,CAAgB,CAAhB;AACA,WAAOzN,MAAM,CAANA,MAAAA,CAAcwN,SAAS,IAAvBxN,EAAAA,EAAP,CAAOA,CAAP;AACD;;AAED,iBAAA,SAAA,CAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,UAAA,EAIqC;AAEnChD,IAAAA,SAAS,CACP2L,OAAO,CADA,MAAA,EAAT3L,sEAAS,CAATA;;AAKA,QAAI;AACF,UAAIgQ,kBAAkB,CAAlBA,GAAAA,CAAuBrE,OAAO,CAAlC,MAAIqE,CAAJ,EAA4C;AAC1C,YAAI5D,MAAM,GAAG,MAAMsE,MAAM,CAAA,OAAA,EAAA,OAAA,EAGvBC,UAAU,IAAIxE,cAAc,CAAA,OAAA,EAHL,QAGK,CAHL,EAIvBwE,UAAU,IAJZ,IAAyB,CAAzB;AAMA,eAAA,MAAA;AACD;;AAED,UAAIvE,MAAM,GAAG,MAAMwE,aAAa,CAAA,OAAA,EAAA,OAAA,EAAhC,UAAgC,CAAhC;AACA,aAAOxE,MAAM,YAANA,QAAAA,GAAAA,MAAAA,GAAAA,QAAAA,CAAAA,EAAAA,EAAAA,MAAAA,EAAAA;AAID/C,QAAAA,UAAU,EAJT+C,IAAAA;AAKDiE,QAAAA,aAAa,EAAE;AALdjE,OAAAA,CAAP;AAZF,KAAA,CAmBE,OAAA,CAAA,EAAU;AACV;AACA;AACA;AACA,UAAIyE,oBAAoB,CAAxB,CAAwB,CAAxB,EAA6B;AAC3B,YAAIpJ,CAAC,CAADA,IAAAA,KAAW/H,UAAU,CAArB+H,KAAAA,IAA+B,CAACqJ,kBAAkB,CAACrJ,CAAC,CAAxD,QAAsD,CAAtD,EAAoE;AAClE,gBAAMA,CAAC,CAAP,QAAA;AACD;;AACD,eAAOA,CAAC,CAAR,QAAA;AARQ,OAAA,CAAA;AAWV;;;AACA,UAAIqJ,kBAAkB,CAAtB,CAAsB,CAAtB,EAA2B;AACzB,eAAA,CAAA;AACD;;AACD,YAAA,CAAA;AACD;AACF;;AAED,iBAAA,MAAA,CAAA,OAAA,EAAA,OAAA,EAAA,WAAA,EAAA,cAAA,EAIyB;AAEvB,QAAA,MAAA;;AACA,QAAI,CAAC5E,WAAW,CAAXA,KAAAA,CAAL,MAAA,EAA+B;AAC7B,UAAA,cAAA,EAAoB;AAClB,cAAMqE,yBAAyB,CAAA,IAAA,EAAO;AACpCzK,UAAAA,MAAM,EAD8B,GAAA;AAEpC0B,UAAAA,UAAU,EAAE;AAFwB,SAAP,CAA/B;AAID;;AACD4E,MAAAA,MAAM,GAAGC,yBAAyB,CAACV,OAAO,CAA1CS,GAAkC,CAAlCA;AAPF,KAAA,MAQO;AACLA,MAAAA,MAAM,GAAG,MAAME,kBAAkB,CAAA,QAAA,EAAA,OAAA,EAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAA;AAAA,UAAA,EAAjCF,cAAiC,CAAjCA;;AAUA,UAAIT,OAAO,CAAPA,MAAAA,CAAJ,OAAA,EAA4B;AAC1B,YAAIoF,MAAM,GAAGC,cAAc,GAAA,YAAA,GAA3B,OAAA;AACA,cAAM,IAAA,KAAA,CAAaD,MAAb,GAAN,iBAAM,CAAN;AACD;AACF;;AAED,QAAItE,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AAC5B;AACA;AACA;AACA;AACA,YAAM,IAAA,QAAA,CAAA,IAAA,EAAmB;AACvB3G,QAAAA,MAAM,EAAEsG,MAAM,CADS,MAAA;AAEvBrG,QAAAA,OAAO,EAAE;AACPkL,UAAAA,QAAQ,EAAE7E,MAAM,CAAClP;AADV;AAFc,OAAnB,CAAN;AAMD;;AAED,QAAI6P,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AAC5B,YAAM,IAAA,KAAA,CAAN,qCAAM,CAAN;AACD;;AAED,QAAA,cAAA,EAAoB;AAClB;AACA;AACA,UAAIH,aAAa,CAAjB,MAAiB,CAAjB,EAA2B;AACzB,YAAIC,aAAa,GAAGhB,mBAAmB,CAAA,OAAA,EAAUK,WAAW,CAAXA,KAAAA,CAAjD,EAAuC,CAAvC;AACA,eAAO;AACLtL,UAAAA,OAAO,EAAE,CADJ,WACI,CADJ;AAELwI,UAAAA,UAAU,EAFL,EAAA;AAGLC,UAAAA,UAAU,EAHL,IAAA;AAILC,UAAAA,MAAM,EAAE;AACN,aAACuD,aAAa,CAAbA,KAAAA,CAAD,EAAA,GAA0BT,MAAM,CAAClI;AAD3B,WAJH;AAOL;AACA;AACAiM,UAAAA,UAAU,EATL,GAAA;AAULC,UAAAA,aAAa,EAVR,EAAA;AAWLC,UAAAA,aAAa,EAAE;AAXV,SAAP;AAaD;;AAED,aAAO;AACLzP,QAAAA,OAAO,EAAE,CADJ,WACI,CADJ;AAELwI,QAAAA,UAAU,EAFL,EAAA;AAGLC,QAAAA,UAAU,EAAE;AAAE,WAAC6C,WAAW,CAAXA,KAAAA,CAAD,EAAA,GAAwBE,MAAM,CAAClG;AAAjC,SAHP;AAILoD,QAAAA,MAAM,EAJD,IAAA;AAKL;AACA;AACA6G,QAAAA,UAAU,EAPL,GAAA;AAQLC,QAAAA,aAAa,EARR,EAAA;AASLC,QAAAA,aAAa,EAAE;AATV,OAAP;AAWD;;AAED,QAAIzD,aAAa,CAAjB,MAAiB,CAAjB,EAA2B;AACzB;AACA;AACA,UAAIC,aAAa,GAAGhB,mBAAmB,CAAA,OAAA,EAAUK,WAAW,CAAXA,KAAAA,CAAjD,EAAuC,CAAvC;AACA,UAAIgF,OAAO,GAAG,MAAMN,aAAa,CAAA,OAAA,EAAA,OAAA,EAAA,SAAA,EAA8B;AAC7D,SAAC/D,aAAa,CAAbA,KAAAA,CAAD,EAAA,GAA0BT,MAAM,CAAClI;AAD4B,OAA9B,CAAjC,CAJyB,CAAA;;AASzB,aAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAEEiM,QAAAA,UAAU,EAAEgB,oBAAoB,CAAC/E,MAAM,CAA3B+E,KAAoB,CAApBA,GACR/E,MAAM,CAANA,KAAAA,CADQ+E,MAAAA,GAFd,GAAA;AAKE9H,QAAAA,UAAU,EALZ,IAAA;AAMEgH,QAAAA,aAAa,EACP,QAAA,CAAA,EAAA,EAAA,MAAM,CAAN,OAAA,GAAiB;AAAE,WAACnE,WAAW,CAAXA,KAAAA,CAAD,EAAA,GAAwBE,MAAM,CAACrG;AAAjC,SAAjB,GADO,EACP;AAPR,OAAA,CAAA;AAUD;;AAED,QAAImL,OAAO,GAAG,MAAMN,aAAa,CAAA,OAAA,EAAjC,OAAiC,CAAjC;AAEA,WAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAGM,MAAM,CAAN,UAAA,GAAoB;AAAET,MAAAA,UAAU,EAAE/D,MAAM,CAAC+D;AAArB,KAApB,GAHN,EAAA,EAAA;AAIE9G,MAAAA,UAAU,EAAE;AACV,SAAC6C,WAAW,CAAXA,KAAAA,CAAD,EAAA,GAAwBE,MAAM,CAAClG;AADrB,OAJd;AAOEmK,MAAAA,aAAa,EACP,QAAA,CAAA,EAAA,EAAA,MAAM,CAAN,OAAA,GAAiB;AAAE,SAACnE,WAAW,CAAXA,KAAAA,CAAD,EAAA,GAAwBE,MAAM,CAACrG;AAAjC,OAAjB,GADO,EACP;AARR,KAAA,CAAA;AAWD;;AAED,iBAAA,aAAA,CAAA,OAAA,EAAA,OAAA,EAAA,UAAA,EAAA,kBAAA,EAIgC;AAK9B,QAAIiL,cAAc,GAAGL,UAAU,IAA/B,IAAA;AACA,QAAIS,cAAc,GAAGT,UAAU,GAC3B,CAD2B,UAC3B,CAD2B,GAE3BU,6BAA6B,CAAA,OAAA,EAE3BrO,MAAM,CAANA,IAAAA,CAAY8J,kBAAkB,IAA9B9J,EAAAA,EAJN,CAIMA,CAF2B,CAFjC;AAMA,QAAIkK,aAAa,GAAGkE,cAAc,CAAdA,MAAAA,CAAuBtI,CAAD,IAAOA,CAAC,CAADA,KAAAA,CAZnB,MAYVsI,CAApB,CAZ8B,CAAA;;AAe9B,QAAIlE,aAAa,CAAbA,MAAAA,KAAJ,CAAA,EAAgC;AAC9B,aAAO;AAAA,QAAA,OAAA;AAEL9D,QAAAA,UAAU,EAFL,EAAA;AAGLE,QAAAA,MAAM,EAAEwD,kBAAkB,IAHrB,IAAA;AAILqD,QAAAA,UAAU,EAJL,GAAA;AAKLC,QAAAA,aAAa,EAAE;AALV,OAAP;AAOD;;AAED,QAAIrB,OAAO,GAAG,MAAMvI,OAAO,CAAPA,GAAAA,CAAY,CAC9B,GAAG,aAAa,CAAb,GAAA,CAAmB1D,KAAD,IACnBwJ,kBAAkB,CAAA,QAAA,EAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAA,SAAA,EAAA;AAAA,QAAA,EAFtB,cAEsB,CADjB,CAD2B,CAAZ9F,CAApB;;AAcA,QAAImF,OAAO,CAAPA,MAAAA,CAAJ,OAAA,EAA4B;AAC1B,UAAIoF,MAAM,GAAGC,cAAc,GAAA,YAAA,GAA3B,OAAA;AACA,YAAM,IAAA,KAAA,CAAaD,MAAb,GAAN,iBAAM,CAAN;AAzC4B,KAAA,CAAA;AA6C9B;;;AACAhC,IAAAA,OAAO,CAAPA,OAAAA,CAAiB3C,MAAD,IAAW;AACzB,UAAIW,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AAC5BX,QAAAA,MAAM,CAANA,YAAAA,CAAAA,MAAAA;AACD;AAjD2B,KA8C9B2C,EA9C8B,CAAA;;AAqD9B,QAAImC,OAAO,GAAGI,sBAAsB,CAAA,OAAA,EAAA,aAAA,EAAA,OAAA,EAApC,kBAAoC,CAApC;AAOA,WAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAEE1Q,MAAAA;AAFF,KAAA,CAAA;AAID;;AAED,WAAA,yBAAA,CAAA,IAAA,EAAA,IAAA,EAEoB;AAElB,WAAO,IAAA,QAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAELmF,MAAAA,OAAO,EAAA,QAAA,CAAA,EAAA,EACFH,IAAI,CADF,OAAA,EAAA;AAEL,gCAAwB;AAFnB,OAAA;AAFF,KAAA,CAAA,CAAP;AAOD;;AAED,SAAO;AAAA,IAAA,UAAA;AAAA,IAAA,KAAA;AAGL2L,IAAAA;AAHK,GAAP;AAKD,C,CAAA;AAID;AACA;AACA;;AAEA;;;AAGG;;;SACaC,yB,CACdvQ,M,EACAiQ,O,EACAhN,K,EAAU;AAEV,MAAIuN,UAAU,GAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAEZtB,IAAAA,UAAU,EAFE,GAAA;AAGZ7G,IAAAA,MAAM,EAAE;AACN,OAAC4H,OAAO,CAAPA,0BAAAA,IAAsCjQ,MAAM,CAANA,CAAM,CAANA,CAAvC,EAAA,GAAsDiD;AADhD;AAHI,GAAA,CAAd;;AAOA,SAAA,UAAA;AACD,C,CAAA;AAGD;;;AACA,SAAA,wBAAA,CAAA,EAAA,EAAA,IAAA,EAAA,SAAA,EAGmB;AAAA,MAAjBwN,SAAiB,KAAA,KAAA,CAAA,EAAA;AAAjBA,IAAAA,SAAiB,GAAL,KAAZA;AAAiB;;AAMjB,MAAIxS,IAAI,GAAG,OAAA,EAAA,KAAA,QAAA,GAAA,EAAA,GAA8BzB,UAAU,CANlC,EAMkC,CAAnD,CANiB,CAAA;;AASjB,MAAI,CAAA,IAAA,IAAU,EAAE,gBAAF,IAAA,KAA2B,EAAE,cAA3C,IAAyC,CAAzC,EAAiE;AAC/D,WAAO;AAAEyB,MAAAA;AAAF,KAAP;AAVe,GAAA,CAAA;;;AAcjB,MAAI8L,IAAI,CAAJA,UAAAA,IAAAA,IAAAA,IAA2BA,IAAI,CAAJA,UAAAA,KAA/B,KAAA,EAA0D;AACxD,WAAO;AAAA,MAAA,IAAA;AAELC,MAAAA,UAAU,EAAE;AACVtD,QAAAA,UAAU,EAAEqD,IAAI,CADN,UAAA;AAEVpD,QAAAA,UAAU,EAAE+J,iBAAiB,CAFnB,IAEmB,CAFnB;AAGV9J,QAAAA,WAAW,EACRmD,IAAI,IAAIA,IAAI,CAAb,WAACA,IAJO,mCAAA;AAKVlD,QAAAA,QAAQ,EAAEkD,IAAI,CAAClD;AALL;AAFP,KAAP;AAfe,GAAA,CAAA;;;AA4BjB,MAAI,CAACkD,IAAI,CAAT,QAAA,EAAoB;AAClB,WAAO;AAAE9L,MAAAA;AAAF,KAAP;AA7Be,GAAA,CAAA;;;AAiCjB,MAAID,UAAU,GAAGX,SAAS,CAA1B,IAA0B,CAA1B;;AACA,MAAI;AACF,QAAIsT,YAAY,GAAGC,6BAA6B,CAAC7G,IAAI,CADnD,QAC8C,CAAhD,CADE,CAAA;AAGF;AACA;;AACA,QACE0G,SAAS,IACTzS,UAAU,CADVyS,MAAAA,IAEAI,kBAAkB,CAAC7S,UAAU,CAH/B,MAGoB,CAHpB,EAIE;AACA2S,MAAAA,YAAY,CAAZA,MAAAA,CAAAA,OAAAA,EAAAA,EAAAA;AACD;;AACD3S,IAAAA,UAAU,CAAVA,MAAAA,GAAAA,MAAAA,YAAAA;AAZF,GAAA,CAaE,OAAA,CAAA,EAAU;AACV,WAAO;AAAA,MAAA,IAAA;AAELiF,MAAAA,KAAK,EAAE,IAAA,aAAA,CAAA,GAAA,EAAA,aAAA,EAAA,0CAAA;AAFF,KAAP;AAQD;;AAED,SAAO;AAAEhF,IAAAA,IAAI,EAAEzB,UAAU,CAAA,UAAA;AAAlB,GAAP;AACD;;AAED,SAAA,iBAAA,CAAA,KAAA,EAAA,QAAA,EAE0B;AAExB,MAAI;AAAA,IAAA,UAAA;AAAA,IAAA,UAAA;AAAA,IAAA,WAAA;AAAuCqK,IAAAA;AAAvC,MAAoD7K,KAAK,CAA7D,UAAA;AACA,MAAI+L,UAAU,GAAgC;AAC5C/L,IAAAA,KAAK,EADuC,SAAA;AAE5CC,IAAAA,QAAQ,EAAEC,cAAc,CAACF,KAAK,CAAN,QAAA,EAAiBqK,QAAQ,CAFL,QAEpB,CAFoB;AAG5CK,IAAAA,UAAU,EAAEA,UAAU,IAHsB,SAAA;AAI5CC,IAAAA,UAAU,EAAEA,UAAU,IAJsB,SAAA;AAK5CC,IAAAA,WAAW,EAAEA,WAAW,IALoB,SAAA;AAM5CC,IAAAA,QAAQ,EAAEA,QAAQ,IAAIxH;AANsB,GAA9C;AAQA,SAAA,UAAA;AACD,C,CAAA;AAGD;;;AACA,SAAA,6BAAA,CAAA,OAAA,EAAA,UAAA,EAEqB;AAEnB,MAAIyR,eAAe,GAAnB,OAAA;;AACA,MAAA,UAAA,EAAgB;AACd,QAAIpV,KAAK,GAAGiE,OAAO,CAAPA,SAAAA,CAAmBkI,CAAD,IAAOA,CAAC,CAADA,KAAAA,CAAAA,EAAAA,KAArC,UAAYlI,CAAZ;;AACA,QAAIjE,KAAK,IAAT,CAAA,EAAgB;AACdoV,MAAAA,eAAe,GAAGnR,OAAO,CAAPA,KAAAA,CAAAA,CAAAA,EAAlBmR,KAAkBnR,CAAlBmR;AACD;AACF;;AACD,SAAA,eAAA;AACD;;AAED,SAAA,gBAAA,CAAA,KAAA,EAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,uBAAA,EAAA,qBAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,gBAAA,EAUgD;AAE9C,MAAIzD,YAAY,GAAGpD,YAAY,GAC3BlI,MAAM,CAANA,MAAAA,CAAAA,YAAAA,EAD2B,CAC3BA,CAD2B,GAE3BgJ,iBAAiB,GACjBhJ,MAAM,CAANA,MAAAA,CAAAA,iBAAAA,EADiB,CACjBA,CADiB,GAJyB,IAE9C,CAF8C,CAAA;;AAS9C,MAAIgP,UAAU,GAAG9G,YAAY,GAAGlI,MAAM,CAANA,IAAAA,CAAAA,YAAAA,EAAH,CAAGA,CAAH,GAA7B,SAAA;AACA,MAAI+O,eAAe,GAAGV,6BAA6B,CAAA,OAAA,EAAnD,UAAmD,CAAnD;AACA,MAAIY,iBAAiB,GAAGF,eAAe,CAAfA,MAAAA,CACtB,CAAA,KAAA,EAAA,KAAA,KACEjP,KAAK,CAALA,KAAAA,CAAAA,MAAAA,IAAAA,IAAAA,KACC,WAAW,CAAC7F,KAAK,CAAN,UAAA,EAAmBA,KAAK,CAALA,OAAAA,CAAnB,KAAmBA,CAAnB,EAAX,KAAW,CAAX,IAAA;AAEC4M,EAAAA,uBAAuB,CAAvBA,IAAAA,CAA8B9J,EAAD,IAAQA,EAAE,KAAK+C,KAAK,CAALA,KAAAA,CAF7C,EAEC+G,CAFD,IAGCqI,sBAAsB,CACpBjV,KAAK,CADe,QAAA,EAEpBA,KAAK,CAALA,OAAAA,CAFoB,KAEpBA,CAFoB,EAAA,UAAA,EAAA,QAAA,EAAA,KAAA,EAAA,sBAAA,EAjBkB,YAiBlB,CAJxB6F,CAFoBiP,CAAxB,CAX8C,CAAA;;AA6B9C,MAAI5E,oBAAoB,GAAxB,EAAA;AACA/C,EAAAA,gBAAgB,IACd,gBAAgB,CAAhB,OAAA,CAAyB,CAAA,MAAA,EAAA,GAAA,KAAqC;AAAA,QAApC,CAAA,IAAA,EAAA,KAAA,EAAA,YAAA,IAAoC,MAAA,CAAA,CAC5D;;AACA,QAAIN,qBAAqB,CAArBA,QAAAA,CAAJ,GAAIA,CAAJ,EAAyC;AACvCqD,MAAAA,oBAAoB,CAApBA,IAAAA,CAA0B,CAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAA1BA,YAA0B,CAA1BA;AADF,KAAA,MAEO,IAAA,sBAAA,EAA4B;AACjC,UAAIgF,gBAAgB,GAAGD,sBAAsB,CAAA,IAAA,EAAA,KAAA,EAAA,UAAA,EAAA,IAAA,EAAA,KAAA,EAAA,sBAAA,EAA7C,YAA6C,CAA7C;;AASA,UAAA,gBAAA,EAAsB;AACpB/E,QAAAA,oBAAoB,CAApBA,IAAAA,CAA0B,CAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAA1BA,YAA0B,CAA1BA;AACD;AACF;AAlBL/C,GACE,CADFA;AAqBA,SAAO,CAAA,iBAAA,EAAP,oBAAO,CAAP;AACD;;AAED,SAAA,WAAA,CAAA,iBAAA,EAAA,YAAA,EAAA,KAAA,EAG+B;AAE7B,MAAIgI,KAAK,GAAA;AAEP,GAAA,YAAA,IAAA;AAEAtP,EAAAA,KAAK,CAALA,KAAAA,CAAAA,EAAAA,KAAmBuP,YAAY,CAAZA,KAAAA,CANQ,EAE7B,CAF6B,CAAA;AAS7B;;AACA,MAAIC,aAAa,GAAGC,iBAAiB,CAACzP,KAAK,CAALA,KAAAA,CAAlByP,EAAiB,CAAjBA,KAVS,SAU7B,CAV6B,CAAA;;AAa7B,SAAOH,KAAK,IAAZ,aAAA;AACD;;AAED,SAAA,kBAAA,CAAA,YAAA,EAAA,KAAA,EAE+B;AAE7B,MAAII,WAAW,GAAGH,YAAY,CAAZA,KAAAA,CAAlB,IAAA;AACA,SAAA;AAEEA,IAAAA,YAAY,CAAZA,QAAAA,KAA0BvP,KAAK,CAA/BuP,QAAAA,IAAAA;AAEA;AACCG,IAAAA,WAAW,IACVA,WAAW,CAAXA,QAAAA,CADDA,GACCA,CADDA,IAECH,YAAY,CAAZA,MAAAA,CAAAA,GAAAA,MAA6BvP,KAAK,CAALA,MAAAA,CAAAA,GAAAA;AAPjC;AASD;;AAED,SAAA,sBAAA,CAAA,eAAA,EAAA,YAAA,EAAA,UAAA,EAAA,QAAA,EAAA,KAAA,EAAA,sBAAA,EAAA,YAAA,EAOsC;AAEpC,MAAI2P,UAAU,GAAGhT,SAAS,CAA1B,eAA0B,CAA1B;AACA,MAAIiT,aAAa,GAAGL,YAAY,CAAhC,MAAA;AACA,MAAIM,OAAO,GAAGlT,SAAS,CAAvB,QAAuB,CAAvB;AACA,MAAImT,UAAU,GAAG9P,KAAK,CALc,MAKpC,CALoC,CAAA;AAQpC;AACA;AACA;AACA;AACA;;AACA,MAAI+P,uBAAuB,GACzBC,kBAAkB,CAAA,YAAA,EAAlBA,KAAkB,CAAlBA,IAAAA;AAEAL,EAAAA,UAAU,CAAVA,QAAAA,OAA0BE,OAAO,CAFjCG,QAE0BH,EAF1BG,IAAAA;AAIAL,EAAAA,UAAU,CAAVA,MAAAA,KAAsBE,OAAO,CAJ7BG,MAAAA,IAAAA;AADF,EAAA,sBAAA;;AASA,MAAIhQ,KAAK,CAALA,KAAAA,CAAJ,gBAAA,EAAkC;AAChC,QAAIiQ,WAAW,GAAG,KAAK,CAAL,KAAA,CAAA,gBAAA,CAAA,QAAA,CAAA;AAAA,MAAA,UAAA;AAAA,MAAA,aAAA;AAAA,MAAA,OAAA;AAIhBH,MAAAA;AAJgB,KAAA,EAAA,UAAA,EAAA;AAAA,MAAA,YAAA;AAOhBC,MAAAA;AAPgB,KAAA,CAAA,CAAlB;;AASA,QAAI,OAAA,WAAA,KAAJ,SAAA,EAAsC;AACpC,aAAA,WAAA;AACD;AACF;;AAED,SAAA,uBAAA;AACD;;AAED,eAAA,kBAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAA,QAAA,EAAA,eAAA,EAAA,cAAA,EAOiC;AAAA,MAD/BG,eAC+B,KAAA,KAAA,CAAA,EAAA;AAD/BA,IAAAA,eAC+B,GADJ,KAA3BA;AAC+B;;AAAA,MAA/BhC,cAA+B,KAAA,KAAA,CAAA,EAAA;AAA/BA,IAAAA,cAA+B,GAAL,KAA1BA;AAA+B;;AAE/B,MAAA,UAAA;AACA,MAH+B,MAG/B,CAH+B,CAAA;;AAM/B,MAAA,MAAA;AACA,MAAIiC,YAAY,GAAG,IAAA,OAAA,CAAY,CAAA,CAAA,EAAA,CAAA,KAAW7M,MAAM,GAAhD,CAAmB,CAAnB;;AACA,MAAI8M,QAAQ,GAAG,MAAM9M,MAArB,EAAA;;AACAuF,EAAAA,OAAO,CAAPA,MAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAAA,QAAAA;;AAEA,MAAI;AACF,QAAIwH,OAAO,GAAGrQ,KAAK,CAALA,KAAAA,CAAd,IAAcA,CAAd;AACA9C,IAAAA,SAAS,CAAA,OAAA,EAAA,wBAAA,IAAA,GAAA,mBAAA,GAEsC8C,KAAK,CAALA,KAAAA,CAFtC,EAAA,GAAT9C,UAAS,CAATA;AAKAoM,IAAAA,MAAM,GAAG,MAAM5F,OAAO,CAAPA,IAAAA,CAAa,CAC1B2M,OAAO,CAAC;AAAA,MAAA,OAAA;AAAWlQ,MAAAA,MAAM,EAAEH,KAAK,CAACG;AAAzB,KAAD,CADmB,EAA5BmJ,YAA4B,CAAb5F,CAAf4F;AAPF,GAAA,CAWE,OAAA,CAAA,EAAU;AACVgH,IAAAA,UAAU,GAAG1T,UAAU,CAAvB0T,KAAAA;AACAhH,IAAAA,MAAM,GAANA,CAAAA;AAbF,GAAA,SAcU;AACRT,IAAAA,OAAO,CAAPA,MAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EAAAA,QAAAA;AACD;;AAED,MAAIS,MAAM,YAAV,QAAA,EAAgC;AAC9B,QAAItG,MAAM,GAAGsG,MAAM,CADW,MAC9B,CAD8B,CAAA;;AAI9B,QAAItG,MAAM,IAANA,GAAAA,IAAiBA,MAAM,IAA3B,GAAA,EAAoC;AAClC,UAAI5I,QAAQ,GAAGkP,MAAM,CAANA,OAAAA,CAAAA,GAAAA,CAAf,UAAeA,CAAf;AACApM,MAAAA,SAAS,CAAA,QAAA,EAFyB,4EAEzB,CAATA,CAFkC,CAAA;;AAQlC,UAAIqT,aAAa,GAAGzS,OAAO,CAAPA,KAAAA,CAAAA,CAAAA,EAAiBA,OAAO,CAAPA,OAAAA,CAAAA,KAAAA,IAArC,CAAoBA,CAApB;AACA,UAAIyE,cAAc,GAAGiO,0BAA0B,CAA1BA,aAA0B,CAA1BA,CAAAA,GAAAA,CAClBxQ,KAAD,IAAWA,KAAK,CADlB,YAAqBwQ,CAArB;AAGA,UAAIC,WAAW,GAAG9T,SAAS,CAACkM,OAAO,CAAjBlM,GAAS,CAATA,CAAlB,QAAA;AACA,UAAI+T,gBAAgB,GAAGC,SAAS,CAAA,QAAA,EAAA,cAAA,EAAhC,WAAgC,CAAhC;AACAzT,MAAAA,SAAS,CACPvC,UAAU,CADH,gBACG,CADH,EAAA,0CAEiC2O,MAAM,CAANA,OAAAA,CAAAA,GAAAA,CAhBR,UAgBQA,CAFjC,CAATpM,CAdkC,CAAA;;AAoBlC,UAAA,QAAA,EAAc;AACZ,YAAId,IAAI,GAAGsU,gBAAgB,CAA3B,QAAA;AACAA,QAAAA,gBAAgB,CAAhBA,QAAAA,GACEtU,IAAI,KAAJA,GAAAA,GAAAA,QAAAA,GAA0BoC,SAAS,CAAC,CAAA,QAAA,EADtCkS,IACsC,CAAD,CADrCA;AAED;;AAEDtW,MAAAA,QAAQ,GAAGO,UAAU,CA1Ba,gBA0Bb,CAArBP,CA1BkC,CAAA;AA6BlC;AACA;AACA;;AACA,UAAA,eAAA,EAAqB;AACnBkP,QAAAA,MAAM,CAANA,OAAAA,CAAAA,GAAAA,CAAAA,UAAAA,EAAAA,QAAAA;AACA,cAAA,MAAA;AACD;;AAED,aAAO;AACLsH,QAAAA,IAAI,EAAEhU,UAAU,CADX,QAAA;AAAA,QAAA,MAAA;AAAA,QAAA,QAAA;AAILiU,QAAAA,UAAU,EAAEvH,MAAM,CAANA,OAAAA,CAAAA,GAAAA,CAAAA,oBAAAA,MAA6C;AAJpD,OAAP;AAzC4B,KAAA,CAAA;AAkD9B;AACA;;;AACA,QAAA,cAAA,EAAoB;AAClB;AACA,YAAM;AACJsH,QAAAA,IAAI,EAAEN,UAAU,IAAI1T,UAAU,CAD1B,IAAA;AAEJkU,QAAAA,QAAQ,EAAExH;AAFN,OAAN;AAID;;AAED,QAAA,IAAA;AACA,QAAIyH,WAAW,GAAGzH,MAAM,CAANA,OAAAA,CAAAA,GAAAA,CAAlB,cAAkBA,CAAlB;;AACA,QAAIyH,WAAW,IAAIA,WAAW,CAAXA,UAAAA,CAAnB,kBAAmBA,CAAnB,EAA+D;AAC7D3N,MAAAA,IAAI,GAAG,MAAMkG,MAAM,CAAnBlG,IAAakG,EAAblG;AADF,KAAA,MAEO;AACLA,MAAAA,IAAI,GAAG,MAAMkG,MAAM,CAAnBlG,IAAakG,EAAblG;AACD;;AAED,QAAIkN,UAAU,KAAK1T,UAAU,CAA7B,KAAA,EAAqC;AACnC,aAAO;AACLgU,QAAAA,IAAI,EADC,UAAA;AAELxP,QAAAA,KAAK,EAAE,IAAA,aAAA,CAAA,MAAA,EAA0BkI,MAAM,CAAhC,UAAA,EAFF,IAEE,CAFF;AAGLrG,QAAAA,OAAO,EAAEqG,MAAM,CAACrG;AAHX,OAAP;AAKD;;AAED,WAAO;AACL2N,MAAAA,IAAI,EAAEhU,UAAU,CADX,IAAA;AAAA,MAAA,IAAA;AAGLyQ,MAAAA,UAAU,EAAE/D,MAAM,CAHb,MAAA;AAILrG,MAAAA,OAAO,EAAEqG,MAAM,CAACrG;AAJX,KAAP;AAMD;;AAED,MAAIqN,UAAU,KAAK1T,UAAU,CAA7B,KAAA,EAAqC;AACnC,WAAO;AAAEgU,MAAAA,IAAI,EAAN,UAAA;AAAoBxP,MAAAA,KAAK,EAAEkI;AAA3B,KAAP;AACD;;AAED,MAAIA,MAAM,YAAV,YAAA,EAAoC;AAClC,WAAO;AAAEsH,MAAAA,IAAI,EAAEhU,UAAU,CAAlB,QAAA;AAA6BiO,MAAAA,YAAY,EAAEvB;AAA3C,KAAP;AACD;;AAED,SAAO;AAAEsH,IAAAA,IAAI,EAAEhU,UAAU,CAAlB,IAAA;AAAyBwG,IAAAA,IAAI,EAAEkG;AAA/B,GAAP;AACD;;AAED,SAAA,aAAA,CAAA,QAAA,EAAA,MAAA,EAAA,UAAA,EAGyB;AAEvB,MAAI3N,GAAG,GAAGgB,SAAS,CAACkS,iBAAiB,CAA3BlS,QAA2B,CAAlB,CAATA,CAAV,QAAUA,EAAV;AACA,MAAImG,IAAI,GAAgB;AAAEoB,IAAAA;AAAF,GAAxB;;AAEA,MAAA,UAAA,EAAgB;AACd,QAAI;AAAA,MAAA,UAAA;AAAA,MAAA,WAAA;AAA2Bc,MAAAA;AAA3B,QAAJ,UAAA;AACAlC,IAAAA,IAAI,CAAJA,MAAAA,GAAc+B,UAAU,CAAxB/B,WAAc+B,EAAd/B;AACAA,IAAAA,IAAI,CAAJA,IAAAA,GACEiC,WAAW,KAAXA,mCAAAA,GACIgK,6BAA6B,CADjChK,QACiC,CADjCA,GADFjC,QAAAA;AARqB,GAAA,CAAA;;;AAevB,SAAO,IAAA,OAAA,CAAA,GAAA,EAAP,IAAO,CAAP;AACD;;AAED,SAAA,6BAAA,CAAA,QAAA,EAAyD;AACvD,MAAIgM,YAAY,GAAG,IAAnB,eAAmB,EAAnB;;AAEA,OAAK,IAAI,CAAA,GAAA,EAAT,KAAS,CAAT,IAAyB9J,QAAQ,CAAjC,OAAyBA,EAAzB,EAA6C;AAC3C9H,IAAAA,SAAS,CACP,OAAA,KAAA,KADO,QAAA,EAEP,qFAFFA,2CAAS,CAATA;AAKA4R,IAAAA,YAAY,CAAZA,MAAAA,CAAAA,GAAAA,EAAAA,KAAAA;AACD;;AAED,SAAA,YAAA;AACD;;AAED,SAAA,sBAAA,CAAA,OAAA,EAAA,aAAA,EAAA,OAAA,EAAA,YAAA,EAAA,eAAA,EAK6C;AAO3C;AACA,MAAIxI,UAAU,GAAd,EAAA;AACA,MAAIE,MAAM,GAAV,IAAA;AACA,MAAA,UAAA;AACA,MAAIwK,UAAU,GAAd,KAAA;AACA,MAAI1D,aAAa,GAZ0B,EAY3C,CAZ2C,CAAA;;AAe3CrB,EAAAA,OAAO,CAAPA,OAAAA,CAAgB,CAAA,MAAA,EAAA,KAAA,KAAkB;AAChC,QAAIhP,EAAE,GAAGmN,aAAa,CAAbA,KAAa,CAAbA,CAAAA,KAAAA,CAAT,EAAA;AACAlN,IAAAA,SAAS,CACP,CAACyM,gBAAgB,CADV,MACU,CADV,EAATzM,qDAAS,CAATA;;AAIA,QAAI4M,aAAa,CAAjB,MAAiB,CAAjB,EAA2B;AACzB;AACA;AACA,UAAIC,aAAa,GAAGhB,mBAAmB,CAAA,OAAA,EAAvC,EAAuC,CAAvC;AACA,UAAI3H,KAAK,GAAGkI,MAAM,CAJO,KAIzB,CAJyB,CAAA;AAMzB;AACA;;AACA,UAAA,YAAA,EAAkB;AAChBlI,QAAAA,KAAK,GAAGlB,MAAM,CAANA,MAAAA,CAAAA,YAAAA,EAARkB,CAAQlB,CAARkB;AACAgH,QAAAA,YAAY,GAAZA,SAAAA;AACD;;AACD5B,MAAAA,MAAM,GAAG,MAAM,CAAN,MAAA,CAAcA,MAAM,IAApB,EAAA,EAA4B;AACnC,SAACuD,aAAa,CAAbA,KAAAA,CAAD,EAAA,GAA0B3I;AADS,OAA5B,CAAToF,CAZyB,CAAA;AAgBzB;;AACA,UAAI,CAAJ,UAAA,EAAiB;AACfwK,QAAAA,UAAU,GAAVA,IAAAA;AACA3D,QAAAA,UAAU,GAAGgB,oBAAoB,CAAC/E,MAAM,CAA3B+E,KAAoB,CAApBA,GACT/E,MAAM,CAANA,KAAAA,CADS+E,MAAAA,GAAbhB,GAAAA;AAGD;;AACD,UAAI/D,MAAM,CAAV,OAAA,EAAoB;AAClBgE,QAAAA,aAAa,CAAbA,EAAa,CAAbA,GAAoBhE,MAAM,CAA1BgE,OAAAA;AACD;AAzBH,KAAA,MA0BO,IAAIrD,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AACnC1C,MAAAA,eAAe,IAAIA,eAAe,CAAfA,GAAAA,CAAAA,EAAAA,EAAwB+B,MAAM,CAAjD/B,YAAmBA,CAAnBA;AACAjB,MAAAA,UAAU,CAAVA,EAAU,CAAVA,GAAiBgD,MAAM,CAANA,YAAAA,CAFkB,IAEnChD,CAFmC,CAAA;AAA9B,KAAA,MAIA;AACLA,MAAAA,UAAU,CAAVA,EAAU,CAAVA,GAAiBgD,MAAM,CADlB,IACLhD,CADK,CAAA;AAGL;;AACA,UACEgD,MAAM,CAANA,UAAAA,IAAAA,IAAAA,IACAA,MAAM,CAANA,UAAAA,KADAA,GAAAA,IAEA,CAHF,UAAA,EAIE;AACA+D,QAAAA,UAAU,GAAG/D,MAAM,CAAnB+D,UAAAA;AACD;;AACD,UAAI/D,MAAM,CAAV,OAAA,EAAoB;AAClBgE,QAAAA,aAAa,CAAbA,EAAa,CAAbA,GAAoBhE,MAAM,CAA1BgE,OAAAA;AACD;AACF;AAjEwC,GAe3CrB,EAf2C,CAAA;AAqE3C;;AACA,MAAA,YAAA,EAAkB;AAChBzF,IAAAA,MAAM,GAANA,YAAAA;AACD;;AAED,SAAO;AAAA,IAAA,UAAA;AAAA,IAAA,MAAA;AAGL6G,IAAAA,UAAU,EAAEA,UAAU,IAHjB,GAAA;AAILC,IAAAA;AAJK,GAAP;AAMD;;AAED,SAAA,iBAAA,CAAA,KAAA,EAAA,OAAA,EAAA,aAAA,EAAA,OAAA,EAAA,YAAA,EAAA,oBAAA,EAAA,cAAA,EAAA,eAAA,EAQ4C;AAK1C,MAAI;AAAA,IAAA,UAAA;AAAc9G,IAAAA;AAAd,MAAyBgI,sBAAsB,CAAA,OAAA,EAAA,aAAA,EAAA,OAAA,EAAA,YAAA,EALT,eAKS,CAAnD,CAL0C,CAAA;;AAc1C,OAAK,IAAI3U,KAAK,GAAd,CAAA,EAAoBA,KAAK,GAAGwQ,oBAAoB,CAAhD,MAAA,EAAyDxQ,KAAzD,EAAA,EAAkE;AAChE,QAAI,CAAA,GAAA,GAAA,KAAA,IAAiBwQ,oBAAoB,CAAzC,KAAyC,CAAzC;AACAnN,IAAAA,SAAS,CACPsN,cAAc,KAAdA,SAAAA,IAAgCA,cAAc,CAAdA,KAAc,CAAdA,KADzB,SAAA,EAATtN,2CAAS,CAATA;AAIA,QAAIoM,MAAM,GAAGkB,cAAc,CANqC,KAMrC,CAA3B,CANgE,CAAA;;AAShE,QAAIV,aAAa,CAAjB,MAAiB,CAAjB,EAA2B;AACzB,UAAIC,aAAa,GAAGhB,mBAAmB,CAAC5O,KAAK,CAAN,OAAA,EAAgB6F,KAAK,CAALA,KAAAA,CAAvD,EAAuC,CAAvC;;AACA,UAAI,EAAEwG,MAAM,IAAIA,MAAM,CAACuD,aAAa,CAAbA,KAAAA,CAAvB,EAAsB,CAAlB,CAAJ,EAAiD;AAC/CvD,QAAAA,MAAM,GAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA;AAEJ,WAACuD,aAAa,CAAbA,KAAAA,CAAD,EAAA,GAA0BT,MAAM,CAAClI;AAF7B,SAAA,CAANoF;AAID;;AACDrM,MAAAA,KAAK,CAALA,QAAAA,CAAAA,MAAAA,CAAAA,GAAAA;AARF,KAAA,MASO,IAAIwP,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AACnC;AACA;AACA,YAAM,IAAA,KAAA,CAAN,yCAAM,CAAN;AAHK,KAAA,MAIA,IAAIM,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AACnC;AACA;AACA,YAAM,IAAA,KAAA,CAAN,iCAAM,CAAN;AAHK,KAAA,MAIA;AACL,UAAI6B,WAAW,GAA0B;AACvC3R,QAAAA,KAAK,EADkC,MAAA;AAEvCiJ,QAAAA,IAAI,EAAEkG,MAAM,CAF2B,IAAA;AAGvCzE,QAAAA,UAAU,EAH6B,SAAA;AAIvCC,QAAAA,UAAU,EAJ6B,SAAA;AAKvCC,QAAAA,WAAW,EAL4B,SAAA;AAMvCC,QAAAA,QAAQ,EAAExH;AAN6B,OAAzC;AAQArD,MAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,WAAAA;AACD;AACF;;AAED,SAAO;AAAA,IAAA,UAAA;AAAcqM,IAAAA;AAAd,GAAP;AACD;;AAED,SAAA,eAAA,CAAA,UAAA,EAAA,aAAA,EAAA,OAAA,EAGmC;AAEjC,MAAIyK,gBAAgB,GAAQrJ,QAAAA,CAAAA,EAAAA,EAA5B,aAA4BA,CAA5B;;AACA9J,EAAAA,OAAO,CAAPA,OAAAA,CAAiBkC,KAAD,IAAU;AACxB,QAAI/C,EAAE,GAAG+C,KAAK,CAALA,KAAAA,CAAT,EAAA;;AACA,QAAI4H,aAAa,CAAbA,EAAa,CAAbA,KAAAA,SAAAA,IAAmCtB,UAAU,CAAVA,EAAU,CAAVA,KAAvC,SAAA,EAAqE;AACnE2K,MAAAA,gBAAgB,CAAhBA,EAAgB,CAAhBA,GAAuB3K,UAAU,CAAjC2K,EAAiC,CAAjCA;AACD;AAJHnT,GAAAA;AAMA,SAAA,gBAAA;AACD,C,CAAA;AAGD;AACA;;;AACA,SAAA,mBAAA,CAAA,OAAA,EAAA,OAAA,EAEkB;AAEhB,MAAIoT,eAAe,GAAG/G,OAAO,GACzBrM,OAAO,CAAPA,KAAAA,CAAAA,CAAAA,EAAiBA,OAAO,CAAPA,SAAAA,CAAmBkI,CAAD,IAAOA,CAAC,CAADA,KAAAA,CAAAA,EAAAA,KAAzBlI,OAAAA,IADQ,CACzBA,CADyB,GAEzB,CAAC,GAFL,OAEI,CAFJ;AAGA,SACEoT,eAAe,CAAfA,OAAAA,GAAAA,IAAAA,CAAgClL,CAAD,IAAOA,CAAC,CAADA,KAAAA,CAAAA,gBAAAA,KAAtCkL,IAAAA,KACApT,OAAO,CAFT,CAES,CAFT;AAID;;AAED,SAAA,sBAAA,CAAA,MAAA,EAAA,MAAA,EAAA,UAAA,EAGoB;AAMlB;AACA,MAAIjB,KAAK,GAAGsB,MAAM,CAANA,IAAAA,CAAagT,CAAD,IAAOA,CAAC,CAADA,KAAAA,IAAW,CAACA,CAAC,CAAbA,IAAAA,IAAsBA,CAAC,CAADA,IAAAA,KAAzChT,GAAAA,KAA4D;AACtElB,IAAAA,EAAE,EAAA,YAAA,MAAA,GAAA;AADoE,GAAxE;AAIA,SAAO;AACLa,IAAAA,OAAO,EAAE,CACP;AACEqC,MAAAA,MAAM,EADR,EAAA;AAEE7E,MAAAA,QAAQ,EAFV,EAAA;AAGE8E,MAAAA,YAAY,EAHd,EAAA;AAIEvD,MAAAA;AAJF,KADO,CADJ;AAAA,IAAA,KAAA;AAULuE,IAAAA,KAAK,EAAE,IAAA,aAAA,CAAA,MAAA,EAAA,UAAA,EAAA,IAAA;AAVF,GAAP;AAYD;;AAED,SAAA,kBAAA,CAAA,MAAA,EAA6D;AAC3D,SAAOgQ,sBAAsB,CAAA,MAAA,EAAA,GAAA,EAA7B,WAA6B,CAA7B;AACD;;AAED,SAAA,0BAAA,CAAA,MAAA,EAAqE;AACnE,SAAOA,sBAAsB,CAAA,MAAA,EAAA,GAAA,EAA7B,oBAA6B,CAA7B;AACD;;AAED,SAAA,yBAAA,CAAA,IAAA,EAA0D;AACxD,MAAI1V,IAAI,GAAG,OAAA,IAAA,KAAA,QAAA,GAAA,IAAA,GAAkCf,UAAU,CAAvD,IAAuD,CAAvD;AACAkB,EAAAA,OAAO,CAAPA,IAAAA,CACE,0EAAA,6DAAA,IAAA,MAAA,IAAA,GADFA,GACE,CADFA;AAKA,SAAO;AACL+U,IAAAA,IAAI,EAAEhU,UAAU,CADX,KAAA;AAELwE,IAAAA,KAAK,EAAE,IAAA,aAAA,CAAA,GAAA,EAAA,oBAAA,EAAA,EAAA;AAFF,GAAP;AAID,C,CAAA;;;AAGD,SAAA,YAAA,CAAA,OAAA,EAA2C;AACzC,OAAK,IAAIrD,CAAC,GAAGkO,OAAO,CAAPA,MAAAA,GAAb,CAAA,EAAiClO,CAAC,IAAlC,CAAA,EAAyCA,CAAzC,EAAA,EAA8C;AAC5C,QAAIuL,MAAM,GAAG2C,OAAO,CAApB,CAAoB,CAApB;;AACA,QAAItC,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AAC5B,aAAA,MAAA;AACD;AACF;AACF;;AAED,SAAA,iBAAA,CAAA,IAAA,EAAmC;AACjC,MAAIxN,UAAU,GAAG,OAAA,IAAA,KAAA,QAAA,GAA2BX,SAAS,CAApC,IAAoC,CAApC,GAAjB,IAAA;AACA,SAAOb,UAAU,CAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAAkBO,IAAAA,IAAI,EAAE;AAAxB,GAAA,CAAA,CAAjB;AACD;;AAED,SAAA,gBAAA,CAAA,CAAA,EAAA,CAAA,EAAkD;AAChD,SACE0D,CAAC,CAADA,QAAAA,KAAeC,CAAC,CAAhBD,QAAAA,IAA6BA,CAAC,CAADA,MAAAA,KAAaC,CAAC,CAA3CD,MAAAA,IAAsDA,CAAC,CAADA,IAAAA,KAAWC,CAAC,CADpE,IAAA;AAGD;;AAED,SAAA,gBAAA,CAAA,MAAA,EAA4C;AAC1C,SAAOyK,MAAM,CAANA,IAAAA,KAAgB1M,UAAU,CAAjC,QAAA;AACD;;AAED,SAAA,aAAA,CAAA,MAAA,EAAyC;AACvC,SAAO0M,MAAM,CAANA,IAAAA,KAAgB1M,UAAU,CAAjC,KAAA;AACD;;AAED,SAAA,gBAAA,CAAA,MAAA,EAA6C;AAC3C,SAAO,CAAC0M,MAAM,IAAIA,MAAM,CAAjB,IAAA,MAA4B1M,UAAU,CAA7C,QAAA;AACD;;AAED,SAAA,kBAAA,CAAA,MAAA,EAAuC;AACrC,MAAI,EAAE0M,MAAM,YAAZ,QAAI,CAAJ,EAAmC;AACjC,WAAA,KAAA;AACD;;AAED,MAAItG,MAAM,GAAGsG,MAAM,CAAnB,MAAA;AACA,MAAIlP,QAAQ,GAAGkP,MAAM,CAANA,OAAAA,CAAAA,GAAAA,CAAf,UAAeA,CAAf;AACA,SAAOtG,MAAM,IAANA,GAAAA,IAAiBA,MAAM,IAAvBA,GAAAA,IAAkC5I,QAAQ,IAAjD,IAAA;AACD;;AAED,SAAA,oBAAA,CAAA,GAAA,EAAsC;AACpC,SACEiX,GAAG,IACHA,GAAG,CAAHA,QAAAA,YADAA,QAAAA,KAECA,GAAG,CAAHA,IAAAA,KAAazU,UAAU,CAAvByU,IAAAA,IAAgCzU,UAAU,CAH7C,KACEyU,CADF;AAKD;;AAED,eAAA,sBAAA,CAAA,cAAA,EAAA,aAAA,EAAA,OAAA,EAAA,MAAA,EAAA,SAAA,EAAA,iBAAA,EAM+B;AAE7B,OAAK,IAAIxX,KAAK,GAAd,CAAA,EAAoBA,KAAK,GAAGoS,OAAO,CAAnC,MAAA,EAA4CpS,KAA5C,EAAA,EAAqD;AACnD,QAAIyP,MAAM,GAAG2C,OAAO,CAApB,KAAoB,CAApB;AACA,QAAIjM,KAAK,GAAGoK,aAAa,CAAzB,KAAyB,CAAzB;AACA,QAAImF,YAAY,GAAG+B,cAAc,CAAdA,IAAAA,CAChBtL,CAAD,IAAOA,CAAC,CAADA,KAAAA,CAAAA,EAAAA,KAAehG,KAAK,CAALA,KAAAA,CADxB,EAAmBsR,CAAnB;AAGA,QAAIC,oBAAoB,GACtBhC,YAAY,IAAZA,IAAAA,IACA,CAACS,kBAAkB,CAAA,YAAA,EADnBT,KACmB,CADnBA,IAEA,CAACE,iBAAiB,IAAIA,iBAAiB,CAACzP,KAAK,CAALA,KAAAA,CAAxC,EAAuC,CAAvC,MAHF,SAAA;;AAKA,QAAIiK,gBAAgB,CAAhBA,MAAgB,CAAhBA,KAA6B2E,SAAS,IAA1C,oBAAI3E,CAAJ,EAAqE;AACnE;AACA;AACA;AACA,YAAM,mBAAmB,CAAA,MAAA,EAAA,MAAA,EAAnB,SAAmB,CAAnB,CAAA,IAAA,CAAqDX,MAAD,IAAW;AACnE,YAAA,MAAA,EAAY;AACV2C,UAAAA,OAAO,CAAPA,KAAO,CAAPA,GAAiB3C,MAAM,IAAI2C,OAAO,CAAlCA,KAAkC,CAAlCA;AACD;AAHH,OAAM,CAAN;AAKD;AACF;AACF;;AAED,eAAA,mBAAA,CAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAGgB;AAAA,MAAduF,MAAc,KAAA,KAAA,CAAA,EAAA;AAAdA,IAAAA,MAAc,GAAL,KAATA;AAAc;;AAEd,MAAIvN,OAAO,GAAG,MAAMqF,MAAM,CAANA,YAAAA,CAAAA,WAAAA,CAApB,MAAoBA,CAApB;;AACA,MAAA,OAAA,EAAa;AACX;AACD;;AAED,MAAA,MAAA,EAAY;AACV,QAAI;AACF,aAAO;AACLsH,QAAAA,IAAI,EAAEhU,UAAU,CADX,IAAA;AAELwG,QAAAA,IAAI,EAAEkG,MAAM,CAANA,YAAAA,CAAoBjF;AAFrB,OAAP;AADF,KAAA,CAKE,OAAA,CAAA,EAAU;AACV;AACA,aAAO;AACLuM,QAAAA,IAAI,EAAEhU,UAAU,CADX,KAAA;AAELwE,QAAAA,KAAK,EAAEuD;AAFF,OAAP;AAID;AACF;;AAED,SAAO;AACLiM,IAAAA,IAAI,EAAEhU,UAAU,CADX,IAAA;AAELwG,IAAAA,IAAI,EAAEkG,MAAM,CAANA,YAAAA,CAAoBlG;AAFrB,GAAP;AAID;;AAED,SAAA,kBAAA,CAAA,MAAA,EAA0C;AACxC,SAAO,IAAA,eAAA,CAAA,MAAA,EAAA,MAAA,CAAA,OAAA,EAAA,IAAA,CAAkDuK,CAAD,IAAOA,CAAC,KAAhE,EAAO,CAAP;AACD,C,CAAA;AAGD;;;AACA,SAAA,qBAAA,CAAA,KAAA,EAAA,UAAA,EAEuB;AAErB,MAAI;AAAA,IAAA,KAAA;AAAA,IAAA,QAAA;AAAmBxN,IAAAA;AAAnB,MAAJ,KAAA;AACA,SAAO;AACLlD,IAAAA,EAAE,EAAEJ,KAAK,CADJ,EAAA;AAAA,IAAA,QAAA;AAAA,IAAA,MAAA;AAILuG,IAAAA,IAAI,EAAEkD,UAAU,CAACzJ,KAAK,CAJjB,EAIW,CAJX;AAKL4U,IAAAA,MAAM,EAAE5U,KAAK,CAAC4U;AALT,GAAP;AAOD;;AAED,SAAA,cAAA,CAAA,OAAA,EAAA,QAAA,EAE6B;AAE3B,MAAIlW,MAAM,GACR,OAAA,QAAA,KAAA,QAAA,GAA+BC,SAAS,CAATA,QAAS,CAATA,CAA/B,MAAA,GAA4DpB,QAAQ,CADtE,MAAA;;AAEA,MACE0D,OAAO,CAACA,OAAO,CAAPA,MAAAA,GAARA,CAAO,CAAPA,CAAAA,KAAAA,CAAAA,KAAAA,IACAkR,kBAAkB,CAACzT,MAAM,IAF3B,EAEoB,CAFpB,EAGE;AACA;AACA,WAAOuC,OAAO,CAACA,OAAO,CAAPA,MAAAA,GAAf,CAAc,CAAd;AATyB,GAAA,CAAA;AAY3B;;;AACA,MAAI4T,WAAW,GAAGlB,0BAA0B,CAA5C,OAA4C,CAA5C;AACA,SAAOkB,WAAW,CAACA,WAAW,CAAXA,MAAAA,GAAnB,CAAkB,CAAlB;AACD,C,CAAA","sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLAC e navigations for data routers\n   * behave the same as POP\n   *\n   * @param location The incoming location from router.navigate()\n   */\n  encodeLocation(location: Location): Location;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(location) {\n      return location;\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createPath(location);\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(location) {\n      // Encode a Location the same way window.location would\n      let url = createURL(createPath(location));\n      return {\n        ...location,\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createURL,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = init.history.encodeLocation(location);\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(\n        result,\n        redirectNavigation,\n        opts && opts.replace\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst validActionMethods = new Set([\"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\nconst validRequestMethods = new Set([\"GET\", \"HEAD\", ...validActionMethods]);\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      let {\n        matches: methodNotAllowedMatches,\n        route,\n        error,\n      } = getMethodNotAllowedMatches(dataRoutes);\n      return {\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated thrown Response (such as a\n   * 404 or 405) will have a custom X-Remix-Router-Error: \"yes\" header on it\n   * in order to differentiate from responses thrown from user actions/loaders.\n   */\n  async function queryRoute(request: Request, routeId?: string): Promise<any> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      throw createRouterErrorResponse(null, {\n        status: 405,\n        statusText: \"Method Not Allowed\",\n      });\n    } else if (!matches) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (!match) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, match);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (validActionMethods.has(request.method)) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, routeMatch);\n      return result instanceof Response\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      if (isRouteRequest) {\n        throw createRouterErrorResponse(null, {\n          status: 405,\n          statusText: \"Method Not Allowed\",\n        });\n      }\n      result = getMethodNotAllowedResult(request.url);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        undefined, // Basename not currently supported in static handlers\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, undefined, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          undefined, // Basename not currently supported in static handlers\n          true,\n          isRouteRequest\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function createRouterErrorResponse(\n    body: BodyInit | null | undefined,\n    init: ResponseInit\n  ) {\n    return new Response(body, {\n      ...init,\n      headers: {\n        ...init.headers,\n        \"X-Remix-Router-Error\": \"yes\",\n      },\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename: string | undefined,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    let status = result.status;\n\n    // Process redirects\n    if (status >= 300 && status <= 399) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in redirects\n      let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n      let routePathnames = getPathContributingMatches(activeMatches).map(\n        (match) => match.pathnameBase\n      );\n      let requestPath = createURL(request.url).pathname;\n      let resolvedLocation = resolveTo(location, routePathnames, requestPath);\n      invariant(\n        createPath(resolvedLocation),\n        `Unable to resolve redirect location: ${result.headers.get(\"Location\")}`\n      );\n\n      // Prepend the basename to the redirect location if we have one\n      if (basename) {\n        let path = resolvedLocation.pathname;\n        resolvedLocation.pathname =\n          path === \"/\" ? basename : joinPaths([basename, path]);\n      }\n\n      location = createPath(resolvedLocation);\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(\n  routes: AgnosticDataRouteObject[],\n  status: number,\n  statusText: string\n): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-${status}-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(status, statusText, null),\n  };\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 404, \"Not Found\");\n}\n\nfunction getMethodNotAllowedMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 405, \"Method Not Allowed\");\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createPath(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"\"),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    obj.response instanceof Response &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}